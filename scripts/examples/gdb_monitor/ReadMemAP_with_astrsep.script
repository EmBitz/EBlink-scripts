/////////////////////////////////////////////////////
//
// Monitor command: ReadMemAP  <APBaseAddr> <Addr>  <NumItems> <Flags>
//
//   Implementation with "astrsep" which will fill an array with tokens
//
function gdb_qRcmd(packet, length, ebBuffer)
{
    try{
        local tokens = []
        astrsep(tokens, packet," ")

         // ReadMemAP  <APBaseAddr> <Addr>  <NumItems> <Flags>
        if( tokens[0] ==  "ReadMemAP")
        {
            // Check if we have enough values
            if(tokens.len() < 5)
                return ERROR_OK

            local APbase = strToNumber(tokens[1])
            local addr   = strToNumber(tokens[2])
            local num    = strToNumber(tokens[3])
            local flags  = strToNumber(tokens[4])

            local byteLen = (flags == 0 ? 4  : flags)
            local width   = (flags == 0 ? -1 : byteLen*8)
            local fspec   = format("0x%%0%dX",byteLen*2)

            local eb = EBbuffer()

            // Set the EBbuffer access '[]' width
            if(width > 0)
                eb.access(width)

            // Read the memory into buffer with 'width' access
            InterfAPI().readBuf(eb, addr, num*byteLen, width)

            // Create output string
            local outStr = ("O.K.:")
            for(local i=0; i<num; i++){
                outStr += format(fspec, eb[i])
                if( i < num -1) outStr += ","
            }
             
            // Print info if verbose level includes debug info
            debugf("My monitor output: "+outStr+"\n")

            // Return answer to GDB (we return the number of bytes writen)
            return ebBuffer.format(outStr+"\n")
        }
        return ERROR_OK
    }
    catch(e){
        // Catch any string exceptions (e.g. Squirrel error's)
        if(catchString(e))
            return ERROR_NOTIFIED
        printf("GDb error %s\n", errorToStr(e) )
        return ERROR_NOTIFIED
    }

}