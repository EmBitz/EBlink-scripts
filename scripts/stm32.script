//! STmicro
/////////////////////////////////////////////////////
//
//            STmicro cortex-M devices
//
//     The script tries to detect the right memory sizes
//     however, if this is not correct you can set the sizes
//     in kilobytes on the command line as:
//
//         -D FLASH_SIZE=xxx  and -D RAM_SIZE=xxxx
//
//     Fix chip_id for F4 rev A errata , Read CPU ID, as CoreID is the same for F2/F4 - 0x411
//     so we have 0x411 also as a cortex-M4 in the list (see patch).
//

// The supported device matrix
STMICRO <- [
["M0+", [0x40015800],
                   [["l0", [ 0x417, 0x425, 0x447, 0x457 ]],
                    ["gx", [ 0x466, 0x456, 0x460, 0x467 ]],
                    ["c0", [ 0x443, 0x453 ]],
                    ["u0", [ 0x459, 0x489 ]]]],

["M0",  [0x40015800],
                   [["f0", [ 0x440, 0x442, 0x444, 0x445, 0x448 ]]]],

["M3",  [0xE0042000],
                   [["f1", [ 0x410, 0x412, 0x414, 0x418, 0x420, 0x428, 0x430 ]],
                    ["f2", [ 0x411 ]],
                    ["l1", [ 0x416, 0x427, 0x429, 0x436, 0x437 ]]]],

["M4",  [0xE0042000],
                   [["f4", [ 0x413, 0x419, 0x421, 0x423, 0x431, 0x433, 0x434, 0x441, 0x458, 0x411 /* <- patch*/ ]],
                    ["f3", [ 0x422, 0x432, 0x438, 0x439, 0x446 ]],
                    ["l4", [ 0x415, 0x435, 0x461, 0x462, 0x464, 0x470, 0x471 ]],
                    ["gx", [ 0x468, 0x469, 0x479 ]],
                    ["wx", [ 0x495, 0x496, 0x497 ]]]],

["M7",  [0x5C001000],
                   [["f7", [ 0x449, 0x451, 0x452 ]],
                    ["h7", [ 0x450, 0x480, 0x483 ]]]],

["M33", [0xE0044000, 0x44024000],
                   [["u5", [ 0x455, 0x476, 0x481, 0x482 ]],
                    ["l5", [ 0x472 ]],
                    ["h5", [ 0x474, 0x478, 0x484 ]]]]
]

intrfApi <- InterfAPI()  // Global so that all included script files also have access
targetApi<- TargetAPI()  // Global interface to the target class
deviceId <- 0            // Global deviceId

// To decalare user errors below -1000
//const ERROR_MY_ERROR1 -1001
//const ERROR_MY_ERROR2 -1002

/////////////////////////////////////////////////////
//
//  EBlink called Entry point
//
function ebMain()
{
    try{
        findDevice()
    }
    catch(e){
        // Catch any string exceptions (e.g. Squirrel error's)
        if(catchString(e))
            return ERROR_NOTIFIED

        if( e == ERROR_NOT_FOUND)
            if(deviceId){
                printf("\n\nPlease report this ID so that we can add it.\n")
                errorf("Error unsupported STM32 ID: 0x%X\n", deviceId)
            }
            else
                errorf("ERROR: No valid STmicro device ID found\n")
        else if( e != ERROR_NOTIFIED)
             errorf("Error:\tCan't access target device!\n\tIf reset is disabled (\"dr\" option), try with reset.")
        return ERROR_NOTIFIED
    }
    return ERROR_OK
}

/////////////////////////////////////////////////////
//
//
//
function findDevice()
{
    local devReg

    if( VERSION < 6.0){
       errorf("Error:\n\nIncompatiable EBlink version %.2f\n\tPlease update\n", VERSION)
       throw ERROR_NOTIFIED
    }

    foreach(arch in STMICRO)
      if(arch[0] == targetApi.getCpuName()){

          foreach(addr in arch[1]) {
              try{ devReg = intrfApi.read(addr); if(devReg) break; }
              catch(e){}
          }

          if(devReg) {
            deviceId = devReg & 0xfff
            noticef("STmicro device : 0x%X\n", deviceId)

            foreach(script in arch[2])
              foreach(devId in script[1])
                  if( devId == deviceId){
                    require("stmicro/stm32"+script[0]+".script")
                    stm32_device()
                    return
                  }
          }
          break
      }

    throw ERROR_NOT_FOUND
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  ebResetPost(resetType)
{
    try {
        // Check if there is an user defined post reset hook, the user
        // can add his own reset strategy with -S <myscript> as last
        // defined script on the cli. (also used by dualCore e.g. H7)
        if (isScriptObject("ebResetPostHook"))
            return ebResetPostHook(resetType);

        // We don't use this if the reset is a user_script type. In that
        // case, the user is responsible for the initialization.
        //
        if( resetType != USER_RESET ){

            // Set the Stack pointer according the Vector table entry
            targetApi.writeReg("SP", intrfApi.read(0x08000000))

            // Set the Program pointer according the Vector table entry
            targetApi.writeReg("PC", intrfApi.read(0x08000004))
        }
    }
    catch(e) {
        // Catch Squirrel errors in other optional scripts (e.g. ebResetPostHook)
        if(catchString(e))
            return ERROR_NOTIFIED

       if(e < ERROR_NOTIFIED)
                errorf("ERROR(%d): reset failed\n", e )

       return ERROR_NOTIFIED
    }

    return ERROR_OK
}
