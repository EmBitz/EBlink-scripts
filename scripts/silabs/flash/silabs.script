/////////////////////////////////////////////////////
//
//      Generic Silabs flash routine
//     According Silabs reference manual
//
//  Device specific defines mscBase and mscLockOff needed from parent script
//


// Device generic
const MSC_WRITECTRL 0x08
const MSC_WRITECMD  0x0C
const MSC_ADDRB     0x10
const MSC_WDATA     0x18
const MSC_STATUS    0x1C
const MSC_MASSLOCK  0x54


const MSC_UNLOCK_KEY  0x1B71
const MSC_MASS_KEY    0x631A

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and prepare erasing and writing
//
function ebFlashStart()
{
    try{
        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
              throw ERROR_TIMEOUT

              targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        // Unlock MSC
        intrfApi.write(mscBase|mscLockOff, MSC_UNLOCK_KEY)

        // Enable WREN in  MSC_WRITECTRL    )
        intrfApi.write(mscBase|MSC_WRITECTRL, intrfApi.read(mscBase|MSC_WRITECTRL) | 0x01 )

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error unlocking flash! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence of one sector
//
function ebFlashErase(sector, address)
{
    try{
        //MSC->ADDRB = address
        intrfApi.write(mscBase|MSC_ADDRB, address)

        // MSC->WRITECMD = MSC_WRITECMD_LADDRIM
        intrfApi.write(mscBase|MSC_WRITECMD, 0x01)

        //MSC->WRITECMD = MSC_WRITECMD_ERASEPAGE
        intrfApi.write(mscBase|MSC_WRITECMD, 0x02)

        //while ( MSC->STATUS & MSC_STATUS_BUSY )
        local time = GetTickCount()
        do{
            if(GetTickCount() - time > 2000)
                throw ERROR_TIMEOUT
        }while (intrfApi.read(mscBase|MSC_STATUS) &  0x01 )

        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//  The actual flash writing. The length is always 32 bits boundary but can be
//  smaller than a sector size.
//
function flash_write(sector, address, buffer)
{
    try{
        //while ( MSC->STATUS & MSC_STATUS_BUSY )
        local time = GetTickCount()
        do{
            if(GetTickCount() - time > 2000)
                throw ERROR_TIMEOUT
        }while (intrfApi.read(mscBase|MSC_STATUS) &  0x01 )

        // Write the destination address in MSC_ADDRB
        intrfApi.write(mscBase|MSC_ADDRB, address)

        // MSC->WRITECMD = MSC_WRITECMD_LADDRIM
        intrfApi.write(mscBase|MSC_WRITECMD, 0x01)

        // Write the flash content and use the auto address increment
        // of the MSC engine.
        local idx = 0
        while(idx < buffer.getSize() )
        {
            // Write word to MSC_DATA
            intrfApi.write( mscBase|MSC_WDATA, buffer.get32(idx) )

            // Initiate write with auto increment, 1 to WRITETRIG in MSC_WRITECMD
            intrfApi.write(mscBase|MSC_WRITECMD, 0x10)
            idx += 4
        }

        // End writing  MSC->WRITECMD = MSC_WRITECMD_WRITEEND
        intrfApi.write(mscBase|MSC_WRITECMD, 0x04)
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Finalize the flash operations
//
function flash_done()
{
    try{
        //while ( MSC->STATUS & MSC_STATUS_BUSY )
        local time = GetTickCount()
        do{
            if(GetTickCount() - time > 2000)
                throw ERROR_TIMEOUT
        }while (intrfApi.read(mscBase|MSC_STATUS) &  0x01 )

        // Disable flash writing WREN in MSC_WRITECTRL
        intrfApi.write(mscBase|MSC_WRITECTRL, 0 )

        // Lock MSC
        intrfApi.write(mscBase|mscLockOff, 0 )

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       return e
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EB-link.
//   - This is an isolated function, ebFlashStart and flash_done are not
//     called by EB-link so we have to explicit unlock and lock in this function.
//
function ebFlashEraseChip()
{
    try{
        // Unlock device, see above
        if( ebFlashStart() < ERROR_OK)
            throw ERROR_NOTIFIED

        // MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK
        intrfApi.write(mscBase|MSC_MASSLOCK, MSC_MASS_KEY)

        // Erase first 512K block
        //MSC->WRITECMD = MSC_WRITECMD_ERASEMAIN0
        intrfApi.write(mscBase|MSC_WRITECMD, 0x100)

        //while ( MSC->STATUS & MSC_STATUS_BUSY )
        local time = GetTickCount()
        do{
            if(GetTickCount() - time > 2000)
                throw ERROR_TIMEOUT
        }while ( intrfApi.read(mscBase|MSC_STATUS) &  0x01 )

        // Second 512K block if this is available
        if( flashSize > 512 )
        {
            //MSC->WRITECMD = MSC_WRITECMD_ERASEMAIN1
            intrfApi.write(mscBase|MSC_WRITECMD, 0x200)

            //while ( MSC->STATUS & MSC_STATUS_BUSY )
            time = GetTickCount()
            do{
                if(GetTickCount() - time > 2000)
                    throw ERROR_TIMEOUT
            }while ( intrfApi.read(mscBase|MSC_STATUS) &  0x01 )
        }

        // Lock the flash, see above
        if( flash_done() < ERROR_OK)
            throw ERROR_NOTIFIED

        // Inform the user what we did
        printf("Flash: -- chip erased --\n")
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: Chip erasing\n")
       return ERROR_NOTIFIED
    }
}
