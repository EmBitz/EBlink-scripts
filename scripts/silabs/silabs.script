/////////////////////////////////////////////////////
//
//                   Silabs
//
//

/////////////////////////////////////////////////////
//
//   Generic Silabs memory map template
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
//   We use @@ to denote that it is a multi-line format string and not verbatim.
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
    <property name=\"blocksize\">0x%x</property>
 </memory>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
 <memory type=\"flash\" start=\"0x0fe00000\" length=\"0x14000\">
   <property name=\"blocksize\">0x800</property>
 </memory>
</memory-map>"

SILABS <- [
 [16,"EFR32MG1P%d - Mighty Gecko\n"],
 [17,"EFR32MG1B%d - Mighty Gecko Gen1\n"],
 [18,"EFR32MG1V%d - Mighty Gecko Gen1\n"],
 [19,"EFR32BG1P%d - Blue Gecko Gen1\n"],
 [20,"EFR32BG1B%d - Blue Gecko Gen1\n"],
 [21,"EFR32BG1V%d - Blue Gecko Gen1\n"],
 [25,"EFR32FG1P%d - Flex Gecko Gen1\n"],
 [26,"EFR32FG1B%d - Flex Gecko Gen1\n"],
 [27,"EFR32FG1V%d - Flex Gecko Gen1\n"],
 [40,"EFR32MG13P%d - EFR32 Mighty Gecko Family Series 1 Config 3\n"],
 [41,"EFR32MG13B%d - EFR32 Mighty Gecko Family Series 1 Config 3\n"],
 [42,"EFR32MG13V%d - EFR32 Mighty Gecko Family Series 1 Config 3\n"],
 [43,"EFR32BG13P%d - EFR32 Blue Gecko Family Series 1 Config 3\n"],
 [44,"EFR32BG13B%d - EFR32 Blue Gecko Family Series 1 Config 3\n"],
 [45,"EFR32BG13V%d - EFR32 Blue Gecko Family Series 1 Config 3\n"],
 [49,"EFR32FG13P%d - EFR32 Flex Gecko Family Series 1 Config 3\n"],
 [50,"EFR32FG13B%d - EFR32 Flex Gecko Family Series 1 Config 3\n"],
 [51,"EFR32FG13V%d - EFR32 Flex Gecko Family Series 1 Config 3\n"],
 [52,"EFR32MG14P%d - EFR32 Mighty Gecko Family Series 1 Config 4\n"],
 [53,"EFR32MG14B%d - EFR32 Mighty Gecko Family Series 1 Config 4\n"],
 [54,"EFR32MG14V%d - EFR32 Mighty Gecko Family Series 1 Config 4\n"],
 [55,"EFR32BG14P%d - EFR32 Blue Gecko Family Series 1 Config 4\n"],
 [56,"EFR32BG14B%d - EFR32 Blue Gecko Family Series 1 Config 4\n"],
 [57,"EFR32BG14V%d - EFR32 Blue Gecko Family Series 1 Config 4\n"],
 [61,"EFR32FG14P%d - EFR32 Flex Gecko Family Series 1 Config 4\n"],
 [62,"EFR32FG14B%d - EFR32 Flex Gecko Family Series 1 Config 4\n"],
 [63,"EFR32FG14V%d - EFR32 Flex Gecko Family Series 1 Config 4\n"],
 [71,"EFM32G%d - Gecko\n"],
 [72,"EFM32GG%d - Giant Gecko\n"],
 [73,"EFM32TG%d - Tiny Gecko\n"],
 [74,"EFM32LG%d - Leopard Gecko\n"],
 [75,"EFM32WG%d - Wonder Gecko\n"],
 [76,"EFM32ZG%d - Zero Gecko\n"],
 [77,"EFM32HG%d - Happy Gecko\n"],
 [81,"EFM32PG1B%d - Pearl Gecko Gen1\n"],
 [83,"EFM32JG1B%d - Jade Gecko Gen1\n"],
 [120,"EZR32LG%d - Leopard Gecko\n"],
 [121,"EZR32WG%d - Wonder Gecko\n"],
 [122,"EZR32HG%d - Happy Gecko\n"],
]

SILABS_REG <- [
   [0x400E0000,  0x40],   
   [0x400C0000,  0x3C]
]


flashSize  <- 0 // Global flash size, is also used for mass erase
mscBase    <- 0 // Default base address for flash MSC
mscLockOff <- 0 // Default offset of the unlock register

/////////////////////////////////////////////////////
//
//
//
function silabs_device()
{
    // Isolate the family ID and part number from the 32 bits register value
    local famId     = (deviceId >> 16) & 0xFF

    noticef("Silabs fam. ID : %d\n", famId)

    local deviceStr = ""
    foreach(dev in SILABS)
      if(dev[0] == famId){
          deviceStr = dev[1]
          break
       }

    if(deviceStr.len() == 0)
        throw ERROR_NOT_FOUND

    // Inform user
    printf("Silabs part    : ")
    printf(deviceStr, deviceId & 0xFFFF)

    // Get the MEM_INFO_PAGE_SIZE
    local pageSize = (intrfApi.read(0x0FE081E4) >> 24) & 0xFF
    pageSize = pow(2, ((pageSize+10) & 0xFF))    
    

    // Get the MEM_INFO_FLASH and MEM_INFO_RAM
    local value = intrfApi.read(0x0FE081F8 )

    flashSize = value & 0xFFFF
    local ramSize = (value >> 16) & 0xFFFF

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flashSize, ramSize)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flashSize = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ramSize = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap( format( mem_template,  flashSize*1024, pageSize, ramSize*1024 ))


    foreach(silab in SILABS_REG){
      try{
        noticef("Silabs.script: Check MSC base address 0x%X\n", silab[0] )  
        if( intrfApi.read(silab[0]| 0x1C) &0x08) )
            {
                mscBase    = silab[0]
                mscLockOff = silab[1]
                require("silabs/flash/silabs.script")            
                return
            }
      }
      catch(e)
      {
      }                
    }

    // Check WDATAREADY again on this MSC base address
    errorf("ERROR: Can't find Silabs MSC base address\n");
    return ERROR_NOTIFIED
}
