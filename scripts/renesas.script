//! Renesas
/////////////////////////////////////////////////////
//
//            Renesas cortex-M devices
//
//     The script tries to detect the right memory sizes
//     however, if this is not correct you can set the sizes
//     in kilobytes on the command line as:
//
//         -D FLASH_SIZE=xxx  and -D RAM_SIZE=xxxx
//

// The supported device matrix
RENESAS <- [
["M23", [ "A2L1", "A2E1", "A2E2", "A2E3", "A2A1" ]],
["M4",  [ "A4M1", "A4W1", "A6M1", "A6M2", "A6M3", "A6T1" ]],
["M33", [ "A4M2", "A4M3", "A4E1", "A4E2", "A4T1", "A6M4", "A6M5", "A6E1", "A6E2", "A6T2", "A6T3" ]],
//["M85", [ "A8D1", "A8M1" ]],
]

// The register scan list for the CPU ID
RENESAS_REG <- [
    0x010080f0,
    0x01001c10,
]

// Script wide globals
intrfApi <- InterfAPI()
targetApi<- TargetAPI()
deviceStr<- ""
familyStr<- ""

const RENESAS_FMIFRT 0x407fb19c

// Used by scripts to denote a not found device
const ERROR_NOT_FOUND -100

/////////////////////////////////////////////////////
//
//  EBlink called Entry point
//
function main()
{
    try{
        findDevice()
    }
    catch(e){
        // Catch any string exceptions (e.g. Squirrel error's)
        if(catchString(e))
            return ERROR_NOTIFIED

        if( e == ERROR_NOT_FOUND)
            if(deviceStr.len()){
                printf("\n\nPlease report this ID so that we can add it.\n")
                errorf("Error unsupported RENESAS part: %s\n", deviceStr)
            }
            else
                errorf("ERROR: No valid deviceStr device part found\n")
        else if( e != ERROR_NOTIFIED)
            errorf("Error:\tCan't access target device!\n\tIf reset is disabled (\"dr\" option), try with reset.")
        return ERROR_NOTIFIED
    }
    return ERROR_OK
}

/////////////////////////////////////////////////////
//
//
//
function findDevice()
{
    if( VERSION < 5.12){
       errorf("Error:\n\nIncompatiable EBlink version %.2f\nPlease update to >= 5.12\n", VERSION)
       throw ERROR_NOTIFIED
    }

    foreach(cpuReg in RENESAS_REG)
        if( getPartString(cpuReg))
            break

    if(!deviceStr.len())
        getPartString(intrfApi.readMem32(RENESAS_FMIFRT)+24)

    if(!deviceStr.len())
        throw ERROR_NOT_FOUND

    noticef("Renesas part   : %s\n", deviceStr)

    familyStr = deviceStr.slice(3,7)
    foreach(arch in RENESAS)
      if(arch[0] == targetApi.getCpuName()){
          foreach(cpuFam in arch[1])
             if( cpuFam == familyStr){
                    require("renesas/renesas"+arch[0]+".script")
                    renesas_device()
                    return
                  }
          break
      }

    throw ERROR_NOT_FOUND
}

/////////////////////////////////////////////////////
//
//
//
function getPartString(addr)
{
    local preg = []
    deviceStr=""
    try{
        for (local i=0;i<4;i++){
           local value = intrfApi.readMem32(addr+(i*4))
           if(value==0)
               return false
           preg.append(value)
        }

        if(addr == 0x01001c10)
          for (local i=0;i<13;i++)
             deviceStr += format("%c",(preg[3-(i+3)/4]>>(24-((i+3)&3)*8)))
        else
          for (local i=0;i<16;i++)
             deviceStr += format("%c",(preg[i/4]>>(i&3)*8))
    }
    catch(e) {
        return false
    }

    deviceStr = strip(deviceStr)
    return true;
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    try {
        // Check if there is an user defined post reset hook, the user
        // can add his own reset strategy with -S <myscript> as last
        // defined script on the cli.
        if (isScriptObject("reset_post_hook"))
            return reset_post_hook(resetType);

        // We don't use this if the reset is a user_script type. In that
        // case, the user is responsible for the initialization.
        //
        if( resetType != USER_RESET ){

            // Set the Stack pointer according the Vector table entry
            targetApi.writeReg("SP", intrfApi.readMem32(0x00000000))

            // Set the Program pointer according the Vector table entry
            targetApi.writeReg("PC", intrfApi.readMem32(0x00000004))
        }
    }
    catch(e) {
        // Catch Squirrel errors in other optional scripts (e.g. reset_post_hook)
        if(catchString(e))
            return ERROR_NOTIFIED

       if(e < ERROR_NOTIFIED)
                errorf("ERROR(%d): reset failed\n", e )

       return ERROR_NOTIFIED
    }

    return ERROR_OK
}
