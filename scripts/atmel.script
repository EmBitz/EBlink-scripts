//! Atmel
/////////////////////////////////////////////////////
//
//               Atmel cortex-M devices
//
//     The script tries to detect the right memory sizes
//     however, if this is not correct you can set the sizes
//     in kilobytes on the command line as:
//
//         -D FLASH_SIZE=xxx  and -D RAM_SIZE=xxxx
//

intrfApi  <- InterfAPI()  // Global so that all included script files also have access
targetApi <- TargetAPI()  // Global so that all included script files also have access
deviceId  <- 0            // Global deviceId

const SAMD_DSU_ID   0x41002018  // Device ID register

// Manufacture ID code
const SAMD_DSU_PID1 0x41003FE4
const SAMD_DSU_PID2 0x41003FE8
const ATMEL_JEP106  0x1F

const SAM3_CHIPID   0x400E0740

/////////////////////////////////////////////////////
//
//  EBlink called Entry point
//
function ebMain( )
{
    try{
        debugf("Looking for Atmel\n")
        findDevice()
    }
    catch(e){
        // Catch any string exceptions (e.g. Squirrel error's)
        if(catchString(e))
            return ERROR_NOTIFIED

        if( e == ERROR_NOT_FOUND)
            if(deviceId)
                errorf("ERROR: Atmel device [%x] is missing in table\n", deviceId)
            else
                errorf("ERROR: No valid Atmel device ID found\n")
        else
            errorf("Error:\tCan't access target device!\n\tIf reset is disabled (\"dr\" option), try with reset.")
        return ERROR_NOTIFIED  // We have already thrown an error so use -1 (otherwise < -1)
    }

    return ERROR_OK;
}

/////////////////////////////////////////////////////
//
//  Look for Atmel device
//
function findDevice()
{
    // Check if the right script API is supported
    if( VERSION < 6.0){
       errorf("Error:\nIncompatiable EBlink version %.2f\nPlease update EBlink in order to use this script file\n", VERSION)
       throw ERROR_NOTIFIED
    }

    switch(targetApi.getCpuName()){
        case "M0+":

            // Get the JEP106 code and check if it's Atmel
            local JEP106 =  (intrfApi.read(SAMD_DSU_PID1) >> 4)
            JEP106 += ((intrfApi.read(SAMD_DSU_PID2) & 7) << 4)

            debugf("Atmel JEP106: %x\n", JEP106)
            if( JEP106 != ATMEL_JEP106)
                   throw ERROR_NOT_FOUND

            // Get the part info from the DSU
            deviceId = intrfApi.read(SAMD_DSU_ID)

            // Check if we have a meaningful device ID
            if(deviceId == 0)
                throw ERROR_NOT_FOUND

            require("atmel/samcd.script")
            atmel_device()
            break

        case "M3":

            deviceId = intrfApi.read(SAM3_CHIPID)

            if (deviceId >= 0x28000961 && deviceId <= 0x29AB0A60){
                require("atmel/sam3.script")
                atmel_device()
            }
            else
                throw ERROR_NOT_FOUND
            break

            // Todo: Other Atmel families
            // intrfApi.read(0x400E0740)
            // intrfApi.read(0x400E0940)

        default:
            throw ERROR_NOT_FOUND
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  ebResetPost(resetType)
{
    try {
        // Check if there is an user defined post reset hook, the user
        // can add his own reset strategy with -S <myscript> as last
        // defined script on the cli.
        if (isScriptObject("ebResetPost_hook"))
            return ebResetPost_hook(resetType);

        // We don't use this if the reset is a user_script type. In that
        // case, the user is responsible for the initialization.
        //
        if( resetType != USER_RESET ){

            // Set the Stack pointer according the Vector table entry
            targetApi.writeReg("SP", intrfApi.read(0x00000000))

            // Set the Program pointer according the Vector table entry
            targetApi.writeReg("PC", intrfApi.read(0x00000004))
        }
    }
    catch(e) {
        // Catch Squirrel errors in other optional scripts (e.g. ebResetPost_hook)
        if(catchString(e))
            return ERROR_NOTIFIED

       if(e < ERROR_NOTIFIED)
                errorf("ERROR(%d): reset failed\n", e )

       return ERROR_NOTIFIED
    }
    return ERROR_OK
}

