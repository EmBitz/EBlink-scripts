/////////////////////////////////////////////////////
//
//                   Renesas
//
//
/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>"


const SYSC_SYOCDCR 0x4001e40e
const SYOCDCR_DBGEN (1<<7)

require("renesas/generic.script")

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function renesas_device()
{
    local flash_size = getFlashSize()
    local page_size = 0
    local ram_size = 0

    intrfApi.write(SYSC_SYOCDCR,SYOCDCR_DBGEN,8)

    printf("Renesas family : R%s\n", familyStr)


    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)


    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", flash_size)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", ram_size)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    errorf("\n Renesas support\nUnder construction!")
    throw ERROR_NOTIFIED

    //DeviceAPI().memmap( format( mem_template, flash_size, ram_size, flash_size, page_size))

    // Flash loader script
}
