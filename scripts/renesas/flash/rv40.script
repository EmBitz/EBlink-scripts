/////////////////////////////////////////////////////////////////////////////////
//
//                   Renesas RV40 flash unit
//
//  Beaware: erased data flash contains garbage by Renesas design
//

const FLASH_TIMEOUT     1500 // Generic 1.5sec flash timeout

const CMD_REG           0x407E0000
//---------------------------------
const CMD_PROGRAM       0xE8
const CMD_PROGRAM_CF    0x80
const CMD_PROGRAM_DF    0x02
const CMD_BLOCK_ERASE   0x20
const CMD_PE_SUSPEND    0xB0
const CMD_PE_RESUME     0xD0
const CMD_STATUS_CLEAR  0x50
const CMD_FORCED_STOP   0xB3
const CMD_BLANK_CHECK   0x71
const CMD_CONFIG_SET_1  0x40
const CMD_CONFIG_SET_2  0x08
const CMD_LOCK_BIT_PGM  0x77
const CMD_LOCK_BIT_READ 0x71
const CMD_FINAL         0xD0


//BASE_REG 0x407FE000
//--------------------------------------------------
const FASTAT_REG       0x407FE010 // Flash Access Status
const FASTAT_CMDLK     (1 << 4) // Command Lock

const FSTATR_REG       0x407FE080  // Flash Status
const FSTATR_FLWEERR   (1 <<  6) // Flash Write/Erase Protect Error Flag
const FSTATR_PRGSPD    (1 <<  8) // Programming Suspend Status Flag
const FSTATR_ERSSPD    (1 <<  9) // Erasure Suspend Status Flag
const FSTATR_DBFULL    (1 << 10) // Data Buffer Full
const FSTATR_RDY       (1 << 15) // Flash Ready
const FSTATR_PRGERR    (1 << 12) // Programming Error
const FSTATR_ERSERR    (1 << 13) // Erasure Error
const FSTATR_ILGLERR   (1 << 14) // Illegal Command Error
const FSTATR_OTERR     (1 << 20) // Other Error
const FSTATR_SECERR    (1 << 21) // Security Error
const FSTATR_FESETERR  (1 << 22) // FENTRY Setting Error
const FSTATR_ILGCOMERR (1 << 23) // Illegal Command Error

const FMEPROT_REG     0x407FE044
const FMEPROT_LOCK    0xD901
const FMEPROT_UNLOCK  0xD900

const FENTRYR_REG     0x407FE084
const FENTRYR_KEY     (0xAA << 8)
const FENTRYR_PE_CF   1
const FENTRYR_PE_DF   (1 << 7)

const FCPSR_REG      0x407FE0E0
const FCPSR_ESUSPMD  1

const FWEPROR_REG    0x4001E416
const FWEPROR_PERMIT 0x01
const FWEPROR_PROHIB 0x02

const FSADDR_REG      0x407FE030

// PE modes
enum peMode {
    READ_PE,
    CODE_PE,
    DATA_PE
}

// Not actively used right now!!
maxFlashSpeed   <- 4000 // 4MHz is max speed for direct programming (we think)

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_start()
{
    try{
        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()


        // Be sure that the core is halted and all clocks are reset
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount();
        do{
            targetApi.poll()
            if(GetTickCount() - time > FLASH_TIMEOUT)
                throw ERROR_TIMEOUT
        } while(targetApi.getState() != TARGET_HALTED )

        intrfApi.write(FWEPROR_REG, FWEPROR_PERMIT,8)

        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error unlocking flash! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_erase(sector, address)
{
    try{
        if(sector < 1000)
            switchPeMode(peMode.CODE_PE)
        else  {
            // We keep data intact for chip erase, otherwise comment this out
            if(DeviceAPI().isChipErase()){
                noticef("Skiped data by chip erase [0x%X]\n", address)
                return ERROR_OK
            }
            switchPeMode(peMode.DATA_PE)
        }

        intrfApi.write(FCPSR_REG, FCPSR_ESUSPMD, 16)
        intrfApi.write(FSADDR_REG, address)

        intrfApi.write(CMD_REG, CMD_BLOCK_ERASE,8)
        intrfApi.write(CMD_REG, CMD_FINAL,8)
        checkBusy(FLASH_TIMEOUT)
        error_check(FSTATR_ERSERR | FSTATR_ILGLERR)
        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
    }

    return ERROR_NOTIFIED
}



/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_write(sector, address, buffer)
{
    try{
        local writeSize
        if(sector < 1000) {
            switchPeMode(peMode.CODE_PE)
            writeSize = 128
        } else {
            switchPeMode(peMode.DATA_PE)
            writeSize = 16
        }

        buffer.trim(writeSize)
        local len = buffer.trimmedSize()
        local idx = 0

        while(len)
        {
           if( writeSize > len)
               writeSize = len

            //Set the first address of the target block to the FSADDR register
            intrfApi.write(FSADDR_REG, address)
            address += writeSize

            // Write E8h to the FACI command-issuing area
            intrfApi.write(CMD_REG, CMD_PROGRAM, 8)

            // Write N to the FACI command-issuing area
            intrfApi.write(CMD_REG, writeSize/2, 8)

            for (local i= 0; i < (writeSize/2); i++) {
                // Write next 2 bytes of data to the FACI commandissuing area
                intrfApi.write(CMD_REG, buffer.get16(idx),16)
                idx += 2
                len -= 2
            }

            intrfApi.write(CMD_REG, CMD_FINAL,8)
            checkBusy(FLASH_TIMEOUT)
        }
        error_check(FSTATR_PRGERR  | FSTATR_ILGLERR)
        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
    try{

        switchPeMode(peMode.READ_PE)
        intrfApi.write(FWEPROR_REG, FWEPROR_PROHIB,8)

        // A reset works perhaps nicer because target can resume rigth away
//        targetApi.reset(SYSTEM_RESET)
        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error locking flash!\n")
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//
//
function checkBusy(timeout)
{
    local time = GetTickCount()
    do{
        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT
    }while ( !(intrfApi.read(FSTATR_REG) & FSTATR_RDY) )
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function error_check(errors)
{
   local status = intrfApi.read(FSTATR_REG)


   if( intrfApi.read(FASTAT_REG, 8) & FASTAT_CMDLK){
       debugf("Recovery from the Command-Locked State\n")
       if(status & FSTATR_ILGLERR){
            debugf("If an illegal error occurred read and clear CFAE and DFAE in FASTAT\n")
           intrfApi.read(FASTAT_REG, 8)
           intrfApi.write(FASTAT_REG, 0, 8)
           checkBusy(FLASH_TIMEOUT)
         }
   }

   if(status & errors){
       intrfApi.write(CMD_REG, CMD_FORCED_STOP, 8)
       throw ERROR_FLASH
   }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Switch from PE mode
//
function switchPeMode(mode)
{
    local entryr = intrfApi.read(FENTRYR_REG, 16)

    switch(mode){
        case peMode.CODE_PE:
           if(entryr == FENTRYR_PE_CF)
               return
           break
        case peMode.DATA_PE:
           if(entryr == FENTRYR_PE_DF)
               return
           break
        default:
            if(entryr == 0) return
            checkBusy(FLASH_TIMEOUT)
    }

    intrfApi.write(FMEPROT_REG, FMEPROT_UNLOCK, 16)

    // If we switch from flash modes we have to go via read mode
    if( mode && entryr){
        checkBusy(FLASH_TIMEOUT)
        intrfApi.write(FENTRYR_REG, FENTRYR_KEY, 16)
    }

    local fev = 0
    switch(mode){
        case peMode.CODE_PE:
           fev = FENTRYR_PE_CF
           break
        case peMode.DATA_PE:
           fev = FENTRYR_PE_DF
           break
        default:
            checkBusy(FLASH_TIMEOUT)
    }

    intrfApi.write(FENTRYR_REG, FENTRYR_KEY | fev, 16)

    local time = GetTickCount()
    do{
        if(GetTickCount() - time > FLASH_TIMEOUT)
            throw ERROR_TIMEOUT

    }while(intrfApi.read(FENTRYR_REG, 16) != fev)

    if(fev == 0)
       intrfApi.write(FMEPROT_REG, FMEPROT_LOCK, 16)

    error_check(FSTATR_ILGLERR)
}
