/////////////////////////////////////////////////////////////////////////////////
//
//                   Renesas MF3 flash unit
//
//   Under construction!!!!
//

// This script is wroking but is very slow. Renesas is still in the 90's with their flash units. Very bad practice.
// We have to us a flashloader in RAM to make this faster.
//                       To be continued

const FLASH_TIMEOUT     1500 // Generic 1.5sec flash timeout


// Data Flash Control Register
const DFLCTL_REG        0x407EC090
const DFLCTL_DFLEN      1

const FENTRYR_REG     0x407EFFB0
const FENTRYR_KEY     (0xAA << 8)
const FENTRYR_PE_CF   1
const FENTRYR_PE_DF   (1 << 7)


const FCR_REG           0x407EC114
const CMD_PROGRAM       0x01
const CMD_BL_CHECK_FL   0x03
const CMD_BLOCK_ERASE   0x04
const CMD_CONS_READ     0x05
const CMD_CHIP_ERASE    0x06
const CMD_BL_CHECK_DT   0x0B
const CMD_DRC          (1<<4)
const CMD_STOP         (1<<6)
const CMD_START        (1<<7)


//BASE_REG 0x407FE000
//--------------------------------------------------

const FSTATR1_REG      0x407EC12C  // Flash Status
const FSTATR1_DRRDY    (1 <<  1) // Flash Write/Erase Protect Error Flag
const FSTATR1_FRDY     (1 <<  6) // Programming Suspend Status Flag
const FSTATR1_EXRDY    (1 <<  7) // Erasure Suspend Status Flag

const FSTATR2_REG      0x407EC1F0  // Flash Status
const FSTATR2_ERERR    (1 << 0) // Erase Error Flag
const FSTATR2_PRGERR   (1 << 1) // Program Error Flag
const FSTATR2_PRGERR01 (1 << 2) // Program Error Flag 01
const FSTATR2_BCERR    (1 << 3) // Blank Check Error Flag
const FSTATR2_ILGLERR  (1 << 4) // Illegal Command Error
const FSTATR2_EILGLERR (1 << 5) // Extra Area Illegal Command Error Flag


// Flash reset
const FRESETR_REG   0x407EC124
//const 0x407EC180    (1<<1) // The registers related to the flash programming are reset.

// Flash P/E Mode Control Register
const FPR_REG        0x407EC180
const FPR_KEY        0xA5

// FMS0
// 0: FMS1 = 0: Read mode
//    FMS1 = 1: Data flash P/E mode.
// 1: FMS1 = 0: Code flash P/E mode
//    FMS1 = 1: Setting prohibited.


const FPMCR_REG      0x407EC100
const FPMCR_FMS0     (1 << 1) // Flash Operating Mode Select 0
const FPMCR_REDIS    (1 << 3) // Code Flash P/E Disable
const FPMCR_FMS1     (1 << 4) // Flash Operating Mode Select 1

// Start address
const FSARH_REG      0x407EC110
const FSARL_REG      0x407EC108
// End address
const FEARH_REG      0x407EC120
const FEARL_REG      0x407EC118
// Program data
const FWBH0_REG      0x407EC138
const FWBL0_REG      0x407EC130

// PE modes
enum peMode {
    READ_PE,
    CODE_PE,
    DATA_PE
}

// Not actively used right now!!
maxFlashSpeed   <- 4000 // 4MHz is max speed for direct programming (we think)

// Generic Flash Script errors
require("renesas/flash/errors.script")

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_start()
{
    // Override the maximum flash speed from cli
    if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
        maxFlashSpeed = FLASH_SPEED
        printf("Flash speed set: %d KHz\n", maxFlashSpeed)
    }

    // Check that we don't go faster than the user selected on the cli
    if(maxFlashSpeed > intrfApi.getSpeed())
        maxFlashSpeed = intrfApi.getSpeed()

    try{
        // Be sure that the core is halted and all clocks are reset
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount();
        do{
            targetApi.poll()
            if(GetTickCount() - time > FLASH_TIMEOUT) 
                throw ERROR_TIMEOUT
        } while(targetApi.getState() != TARGET_HALTED )

        intrfApi._writeMem(DFLCTL_REG, DFLCTL_DFLEN,8)

        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error unlocking flash! %s\n", flashError(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_erase(sector, address)
{
    if(sector < 1000)
        switchPeMode(peMode.CODE_PE)
    else  {
        // We keep data intact for chip erase, otherwise comment this out
        if(DeviceAPI().isChipErase()){
            noticef("Skiped data by chip erase [0x%X]\n", address)
            return ERROR_OK
        }
        switchPeMode(peMode.DATA_PE)
    }

    try{

        setStartAddress(address)
        setEndAddress(address+0x800-4)
        intrfApi._writeMem(FCR_REG, CMD_BLOCK_ERASE | CMD_START,8)
        checkBusy(FLASH_TIMEOUT, FSTATR1_FRDY)

      // intrfApi._writeMem(FCR_REG, CMD_BLOCK_ERASE,8)
        intrfApi._writeMem(FCR_REG, 0,8)


     //function checkBusy(FLASH_TIMEOUT, FSTATR1_FRDY)
      //  error_check(FSTATR_ERSERR | FSTATR_ILGLERR)

        switchPeMode(peMode.READ_PE)
        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! %s\n", sector, flashError(e) )
    }

    return ERROR_NOTIFIED
}



/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_write(sector, address, buffer)
{
    if(sector < 1000) {
        switchPeMode(peMode.CODE_PE)
    } else {
        switchPeMode(peMode.DATA_PE)
    }

    //Set the first address of the target block to the FSADDR register
    setStartAddress(address)

    local idx = 0
    try{
        while(idx < buffer.getSize() ) {
            setPgmData(buffer.un32(idx))
            intrfApi._writeMem(FCR_REG, CMD_PROGRAM | CMD_START,8)
             idx += 4
           // checkBusy(FLASH_TIMEOUT, FSTATR1_FRDY)

           // intrfApi._writeMem(FCR_REG, CMD_PROGRAM,8)
           intrfApi._writeMem(FCR_REG, 0,8)
        }
       // switchPeMode(peMode.READ_PE)
        //error_check(FSTATR_PRGERR  | FSTATR_ILGLERR)
        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! %s\n", sector, flashError(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_done()
{
    try{

        switchPeMode(peMode.READ_PE)
        intrfApi._writeMem(DFLCTL_REG, 0,8)

        // A reset works perhaps nicer because target can resume rigth away
//      targetApi.reset(SYSTEM_RESET)
        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error locking flash!\n")
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//
//
function checkBusy(timeout, flag)
{
    local time = GetTickCount()
    do{
        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT
    }while ( !(intrfApi._readMem(FSTATR1_REG,8) & flag) )
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function error_check(errors)
{
   local status = intrfApi.readMem32(FSTATR_REG)

   if( intrfApi._readMem(FASTAT_REG, 8) & FASTAT_CMDLK){
       debugf("Recovery from the Command-Locked State\n")
       if(status & FSTATR_ILGLERR){
           debugf("If an illegal error occurred read and clear CFAE and DFAE in FASTAT\n")
           intrfApi._readMem(FASTAT_REG, 8)
           intrfApi._writeMem(FASTAT_REG, 0, 8)
           checkBusy(FLASH_TIMEOUT)
         }
   }

   if(status & errors){
       intrfApi._writeMem(CMD_REG, CMD_FORCED_STOP, 8)
       throw ERROR_FLASH
   }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Switch from PE mode
//
function switchPeMode(mode)
{
    local entryr = intrfApi._readMem(FENTRYR_REG, 16)

    switch(mode){
        case peMode.CODE_PE:
           if(entryr == FENTRYR_PE_CF)
               return
           break
        case peMode.DATA_PE:
           if(entryr == FENTRYR_PE_DF)
               return
           break
        default:
            if(entryr == 0) return
    }

    // First to read mode
    writeFPMCR(0x0)
    Sleep(1) //tMS
    intrfApi._writeMem(FENTRYR_REG, FENTRYR_KEY, 16)

    local fentry  = 0
    local fpmcr   = 0

    switch(mode){
        case peMode.CODE_PE:
           fentry = FENTRYR_PE_CF
           fpmcr = 0xC2
           break

        case peMode.DATA_PE:
           fentry = FENTRYR_PE_DF
           fpmcr = 0x50
           break

        default:
    }

    // Do we have to switch to an active mode
    if(fentry){
        intrfApi._writeMem(FENTRYR_REG, FENTRYR_KEY | fentry, 16)
        Sleep(1)
        writeFPMCR(fpmcr)
    }

    local time = GetTickCount()
    do{
        if(GetTickCount() - time > FLASH_TIMEOUT){
            printf("FENTRYR_REG : 0x%X\n", intrfApi._readMem(FENTRYR_REG, 16))
            throw ERROR_TIMEOUT 
        }

    }while(intrfApi._readMem(FENTRYR_REG, 16) != fentry)
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function setStartAddress(address)
{
    intrfApi._writeMem(FSARH_REG, (address >> 16), 16)
    intrfApi._writeMem(FSARL_REG, address &0xFFFF, 16)
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function setEndAddress(address)
{
    intrfApi._writeMem(FEARH_REG, (address >> 16), 16)
    intrfApi._writeMem(FEARL_REG, address &0xFFFF, 16)
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function setPgmData(value)
{
    intrfApi._writeMem( FWBH0_REG, (value >> 16), 16)
    intrfApi._writeMem( FWBL0_REG, value &0xFFFF, 16)
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Write Flash P/E Mode Control Register
//
function writeFPMCR(value)
{
    //Procedure to unlock protection:
    //1. Write 0xA5 to the FPR register.
    intrfApi._writeMem(FPR_REG, FPR_KEY,8)

    //2. Write a set value to the FPMCR register
    intrfApi._writeMem(FPMCR_REG, value,8)

    //3. Write the inverted set value to the FPMCR register.
    intrfApi._writeMem(FPMCR_REG, ~value,8)

    //4. Write a set value to the FPMCR register again.
    intrfApi._writeMem(FPMCR_REG, value,8)
    // tDIS
    Sleep(2)
}
