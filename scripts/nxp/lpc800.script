/////////////////////////////////////////////////////
//
//                   LPC800
//
/////////////////////////////////////////////////////
//
// Adapted from stmicro scripts by J.DuBois
// at Thermalogic Corporation (jer@thlogic.com)
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x1FFF\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x%x\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">%x</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x80000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x14000\"/>
 <memory type=\"ram\" start=\"0xa0000000\" length=\"0x8000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

// Chip ID, description, flash size, page size, ram size, additional flash, page size

NXPCONFIG <- [
[ 0x00008021, "802M001JDH20", 0x3C00, 0x400,  0x800, 0x380, 0x40 ],
[ 0x00008022, "802M011JDH20", 0x3C00, 0x400,  0x800, 0x380, 0x40 ],
[ 0x00008023, "802M001JDH16", 0x3C00, 0x400,  0x800, 0x380, 0x40 ],
[ 0x00008024, "802M001JHI33", 0x3C00, 0x400,  0x800, 0x380, 0x40 ],

[ 0x00008040, "804M101JBD64", 0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
[ 0x00008041, "804M101JDH20", 0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
[ 0x00008042, "804M101JDH24", 0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
[ 0x00008043, "804M111JDH24", 0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
[ 0x00008044, "804M101JHI33", 0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
[ 0x00008041, "804UK",        0x7C00, 0x400, 0x1000, 0x380, 0x40 ],
]

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function lpc_device()
{
    local flash_size,flash1_size
    local page_size,page1_size
	local flash1_secstart
    local ram_size
    local deviceStr

  	for (local i=0;i<NXPCONFIG.len();i++) {
		if (deviceId == NXPCONFIG[i][0]) {
			deviceStr = NXPCONFIG[i][1]
			flash_size = NXPCONFIG[i][2]
			page_size = NXPCONFIG[i][3]
			ram_size = NXPCONFIG[i][4]
		    flash1_size = NXPCONFIG[i][5]
			page1_size = NXPCONFIG[i][6]
		}
	}

	if (deviceStr == "")
        throw ERROR_NOT_FOUND

	flash1_secstart = flash_size/page_size;

    // Inform user of the device found
    printf("NXP LPC family : LPC%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB+%dKB\nConfigured RAM : %dKB\n", flash_size/1024, flash1_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    intrfApi.write(0x40048000, 0x02)

    DeviceAPI().memmap( format( mem_template,  ram_size,flash_size,page_size,flash_size,flash1_size,page1_size,flash1_secstart))

    // Flash loader script
    require("nxp/flash/lpc800.script")
}

/////////////////////////////////////////////////////////////////////////////////
//
// We overrule the default ebResetPost function
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  ebResetPost_hook(resetType)
{
    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    if( resetType != USER_RESET )
    {
        try {
			// Unmap the boot loader from the first 512 bytes of memory
            intrfApi.write(0x40048000,0x02)

			// Set the Stack pointer according the Vector table entry
			targetApi.writeReg("SP", intrfApi.read(0x00000000))

			// Set the Program pointer according the Vector table entry
			targetApi.writeReg("PC", intrfApi.read(0x00000004))

        }

        // Catch the errors
        catch(e){
            if(e < ERROR_NOTIFIED)
                errorf("\nError: Resetting! %d\n", e )
            return ERROR_NOTIFIED
        }

    }

    return ERROR_OK
}
