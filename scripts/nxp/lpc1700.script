/////////////////////////////////////////////////////
//
//                   LPC1700
//
// Adapted from stmicro scripts by J.DuBois
// at Thermalogic Corporation (jer@thlogic.com)

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x2000\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x00010000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">16</property>
 </memory>
 <memory type=\"ram\" start=\"0x2007C000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x100000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x200000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

// Chip ID, description, flash size, page size, ram size, additional flash, page, ram sizes

NXPCONFIG <- [
[ 0x26113F37, "69", 0x10000, 0x1000, 0x4000, 0x70000, 0x8000, 0x10000],
[ 0x26013F37, "68", 0x10000, 0x1000, 0x4000, 0x70000, 0x8000, 0x10000],
[ 0x26012837, "67", 0x10000, 0x1000, 0x4000, 0x70000, 0x8000, 0x10000],
[ 0x26013F33, "66", 0x10000, 0x1000, 0x4000, 0x30000, 0x8000, 0x10000],
[ 0x26013733, "65", 0x10000, 0x1000, 0x4000, 0x30000, 0x8000, 0x10000],
[ 0x26011922, "64", 0x10000, 0x1000, 0x4000, 0x10000, 0x8000,       0],
[ 0x26012033, "63", 0x10000, 0x1000, 0x4000, 0x30000, 0x8000, 0x10000],
[ 0x25113737, "59", 0x10000, 0x1000, 0x4000, 0x70000, 0x8000, 0x10000],
[ 0x25013F37, "58", 0x10000, 0x1000, 0x4000, 0x70000, 0x8000, 0x10000],
[ 0x25011723, "56", 0x10000, 0x1000, 0x4000, 0x30000, 0x8000,       0],
[ 0x25011722, "54", 0x10000, 0x1000, 0x4000, 0x10000, 0x8000,       0],
[ 0x25001121, "52", 0x10000, 0x1000, 0x4000,       0,      0,       0],
[ 0x25001118, "51", 0x10000, 0x1000, 0x2000,       0,      0,       0],
[ 0x25001110, "51",  0x8000, 0x1000, 0x2000,       0,      0,       0],
]

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
flash_size <- 0
page_size <- 0
ram_size <- 0
flash1_size <- 0
page1_size <-0
ram1_size <- 0

function lpc_device()
{
    local deviceStr

	for (local i=0;i<NXPCONFIG.len();i++) {
		if (deviceId == NXPCONFIG[i][0]) {
			deviceStr = NXPCONFIG[i][1]
			flash_size = NXPCONFIG[i][2]
			page_size = NXPCONFIG[i][3]
			ram_size = NXPCONFIG[i][4]
		    flash1_size = NXPCONFIG[i][5]
			page1_size = NXPCONFIG[i][6]
			ram1_size = NXPCONFIG[i][7]
		}
	}

	if (deviceStr == "") 
        throw ERROR_NOT_FOUND

    // Inform user of the device found
    printf("NXP LPC17xx family : LPC17%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB+%dKB\nConfigured RAM : %dKB+%dKB\n",
                flash_size/1024, flash1_size/1024,ram_size/1024,ram1_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    intrfApi.write(0x400FC040, 0x01)

    DeviceAPI().memmap( format( mem_template,  ram_size,flash_size,page_size,flash1_size,page1_size,ram1_size))

    // Flash loader script
    require("nxp/flash/lpc1700.script")
}

/////////////////////////////////////////////////////////////////////////////////
//
// We overrule the default reset_post function
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//

function  reset_post_hook(resetType)
{
	local tmp

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //

    if( resetType != USER_RESET )
    {
        try {
 			// Unmap the boot loader from the first 512 bytes of memory
			intrfApi.write(0x400FC040,0x1)

			// Set the Stack pointer according the Vector table entry			
			targetApi.writeReg("SP", intrfApi.read(0x00000000))

			// Set the Program pointer according the Vector table entry			
			targetApi.writeReg("PC", intrfApi.read(0x00000004))
        }

        // Catch the errors
        catch(e){
            if(e < ERROR_NOTIFIED)
                errorf("\nError: Resetting! %d\n", e )
            return ERROR_NOTIFIED
        }

    }

    return ERROR_OK
}
