/////////////////////////////////////////////////////
//
//                   LPC1100
//
// Adapted from stmicro scripts by J.DuBois
// at Thermalogic Corporation (jer@thlogic.com)

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x1FFF\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x80000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x200000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

const mem_template_multiram = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x1FFF\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20004000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x80000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x200000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

const mem_template_multiram_multiflash = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x1FFF\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20004000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x00018000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">24</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x80000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x200000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

// Chip ID, description, flash size, page size, ram size, additional ram sizes, add. flash size, add. page size

NXPCONFIG <- [
[ 0x0A07102B, "1110FD20",        0x1000, 0x1000,  0x400 ,0,0,0,0],
[ 0x1A07102B, "1110FD20",        0x1000, 0x1000,  0x400 ,0,0,0,0],
[ 0x0A16D02B, "1111FDH20/002",   0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x1A16D02B, "1111FDH20/002",   0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x041E502B, "1111FHN33/101",   0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x2516D02B, "1111FHN33/101",   0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x2516D02B, "1111FHN33/102",   0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x0416502B, "1111FHN33/201",   0x2000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2516902B, "1111FHN33/201",   0x2000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2516902B, "1111FHN33/202",   0x2000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x00010013, "1111xHN33/103",   0x2000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x00010012, "1111xHN33/203",   0x2000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x0A24902B, "1112FDxxx/102",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x1A24902B, "1112FDxxx/102",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x042D502B, "1112FHN33/10x",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x2524D02B, "1112FHN33/10x",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x2524D02B, "1112FHI33/102",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x0425502B, "1112FHN33/201",   0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2524902B, "1112FHN33/201",   0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2524902B, "1112FHxxx/202",   0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x00020023, "1112xHN33/103",   0x4000, 0x1000,  0x800 ,0,0,0,0],
[ 0x00020022, "1112xHx33/203",   0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x0434502B, "1113FHN33/20x",   0x6000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2532902B, "1113FHN33/20x",   0x6000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2532102B, "1113Fxxxx/30x",   0x6000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x0434102B, "1113Fxxxx/30x",   0x6000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00030030, "1113xxxxx/303",   0x6000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00030032, "1113xHN33/203",   0x6000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x0A40902B, "1114Fxxx28/102",  0x8000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x1A40902B, "1114Fxxx28/102",  0x8000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x0444502B, "1114FHN33/20x",   0x8000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x2540902B, "1114FHN33/20x",   0x8000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x0444102B, "1114Fxxxx/30x",   0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x2540102B, "1114Fxxxx/30x",   0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00040042, "1114xHN33/203",   0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00040040, "1114xxxxx/303",   0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00040060, "1114xBD48/323",   0xC000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00040070, "1114FBD48/333",   0xE000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00040070, "1114xxxxx/333",   0xE000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x00050080, "1115xxx48/303",   0x10000,0x1000, 0x2000 ,0,0,0,0],

[ 0x455EC02B, "11A11FHN33/001",  0x2000, 0x1000,  0x800 ,0,0,0,0],
[ 0x4574802B, "11A12Fxxxx/101",  0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x458A402B, "11A13FHI33/201",  0x6000, 0x1000, 0x1800 ,0,0,0,0],
[ 0x35A0002B, "11A14Fxxxx/301",  0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x45A0002B, "11A14Fxxxx/301",  0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x4D4C802B, "11A02UK",         0x4000, 0x1000, 0x1000 ,0,0,0,0],
[ 0x4D80002B, "11A04UK",         0x4000, 0x1000, 0x2000 ,0,0,0,0],

[ 0x1421102B, "11C12FBD48/301",  0x4000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x1440102B, "11C14FBD48/301",  0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x1431102B, "11C22FBD48/301",  0x4000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x1430102B, "11C24FBD48/301",  0x8000, 0x1000, 0x2000 ,0,0,0,0],

[ 0x2540102B, "11D14FBD100/302", 0xE000, 0x1000, 0x2000 ,0,0,0,0],

[ 0x2714302B, "1101LVUK",        0x8000, 0x1000,  0x800 ,0,0,0,0],
[ 0x2724002B, "1102LVUK",        0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x2744202B, "1112LVFHN24/003", 0x4000, 0x1000,  0x800 ,0,0,0,0],     // Part ID same as 1114LVFHN24/103 in user manual, 
//[ 0x2744202B, "1114LVFHN24/103", 0x8000, 0x1000,  0x1000 ,0,0,0,0],  // but parts have different flash & ram sizes!
[ 0x2744002B, "1114LVFHxxx/303", 0x8000, 0x1000, 0x2000 ,0,0,0,0],
[ 0x2722202B, "1112LVFHI33/103", 0x8000, 0x1000, 0x1000 ,0,0,0,0],

[ 0x293E902B, "11E11FHN33/101",     0x2000, 0x1000, 0x1000, 0,0,0,0],
[ 0x2954502B, "11E12FBD48/201",     0x4000, 0x1000, 0x1800, 0,0,0,0],
[ 0x296A102B, "11E13FBD48/301",     0x6000, 0x1000, 0x2000, 0,0,0,0],
[ 0x2980102B, "11E14Fxxxx/401",     0x8000, 0x1000, 0x2000, 0x800,   0x0,0,0],
[ 0x0000BC41, "11E35FHI33/501",     0x10000,0x1000, 0x2000, 0x800, 0x800,0,0],
[ 0x00009C41, "11E36Fxxxx/501",     0x18000,0x1000, 0x2000, 0x800, 0x800,0,0],
[ 0x00007C41, "11E37FBDxx/501",     0x20000,0x1000, 0x2000, 0x800, 0x800,0,0],
[ 0x00007C45, "11E37HFBD64/401",    0x20000,0x1000, 0x2000, 0x800, 0x800,0,0],

[ 0x0000BC88, "11U67JBD48",      0x18000, 0x1000, 0x4000, 0x800, 0x800,  0x8000, 0x8000 ],
[ 0x00007C08, "11U68JBDxx",      0x18000, 0x1000, 0x2000, 0x800, 0x800, 0x28000, 0x8000 ],
[ 0x00007C00, "11U68JBD100",     0x18000, 0x1000, 0x8000, 0x800, 0x800, 0x28000, 0x8000 ],
[ 0x0000BC81, "11E67JBD48",      0x18000, 0x1000, 0x4000, 0x800, 0x800,  0x8000, 0x8000 ],
[ 0x00007C01, "11E68JBDxxx",     0x18000, 0x1000, 0x8000, 0x800, 0x800, 0x28000, 0x8000 ],
[ 0x0000BC80, "11U67JBD100",     0x18000, 0x1000, 0x4000, 0x800, 0x800,  0x8000, 0x8000 ],
[ 0x0000BC88, "11U67JBD64",      0x18000, 0x1000, 0x4000, 0x800, 0x800,  0x8000, 0x8000 ],
[ 0x0000DCC8, "11U66JBD48",      0x10000, 0x1000, 0x2000, 0x800, 0x800,     0x0,    0x0 ],
[ 0x0000BC81, "11E67JBDxxx",     0x18000, 0x1000, 0x4000, 0x800, 0x800,  0x8000, 0x8000 ],
[ 0x0000DCC1, "11E66JBD48",      0x10000, 0x1000, 0x2000, 0x800, 0x800,     0x0,    0x0 ],
]

ram_size <- 0
flash_size <- 0
page_size <- 0

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function lpc_device()
{
    local deviceStr = ""
	local ram1_size = 0
	local ram2_size = 0
	local flash1_size = 0
	local page1_size = 0

	for (local i=0;i<NXPCONFIG.len();i++) {
		if (deviceId == NXPCONFIG[i][0]) {
			deviceStr = NXPCONFIG[i][1]
			flash_size = NXPCONFIG[i][2]
			page_size = NXPCONFIG[i][3]
			ram_size = NXPCONFIG[i][4]
			if (NXPCONFIG[i][5] != 0) ram1_size = NXPCONFIG[i][5]
			if (NXPCONFIG[i][6] != 0) ram2_size = NXPCONFIG[i][6]
			if (NXPCONFIG[i][7] != 0) flash1_size = NXPCONFIG[i][7]
			if (NXPCONFIG[i][8] != 0) page1_size = NXPCONFIG[i][8]
		}
	}

	if (deviceStr == "") {
		printf("Unknown LPC device ID: 0x%08X\n",deviceId)
		throw ERROR_NOT_FOUND
	}

    // Inform user of the device found
    printf("NXP LPC Family : LPC%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\n",(flash_size+flash1_size)/1024)
	printf ("Configured RAM : %dKB",ram_size/1024)
	if (ram1_size > 0) printf("+%dKB",ram1_size/1024)
	if (ram2_size > 0) printf("+%dKB",ram2_size/1024)
	printf("\n")

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    intrfApi.writeMem32(0x40048000, 0x02)

	if (flash1_size > 0) 
		DeviceAPI().memmap( format( mem_template_multiram_multiflash,  ram_size,ram1_size,ram2_size,flash_size,page_size,flash1_size,page1_size))
	else if (ram1_size > 0 || ram2_size > 0)
		DeviceAPI().memmap( format( mem_template_multiram,  ram_size,ram1_size,ram2_size,flash_size,page_size))
	else
		DeviceAPI().memmap( format( mem_template,  ram_size,flash_size,page_size))

    // Flash loader script
    require("nxp/flash/lpc1100.script")
}

/////////////////////////////////////////////////////////////////////////////////
//
// We overrule the default reset_post function
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post_hook(resetType)
{
	local tmp

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //

    if( resetType != USER_RESET )
    {
        try {
			// Unmap the boot loader from the first 512 bytes of memory
            intrfApi.writeMem32(0x40048000,0x02)

			// Set the Stack pointer according the Vector table entry			
			targetApi.writeReg("SP", intrfApi.readMem32(0x00000000))

			// Set the Program pointer according the Vector table entry			
			targetApi.writeReg("PC", intrfApi.readMem32(0x00000004))
        }

        // Catch the errors
        catch(e){
            if(e < ERROR_NOTIFIED)
                errorf("\nError: Resetting! %d\n", e )
            return ERROR_NOTIFIED
        }

		printf("Reset done\n")

    }

    return ERROR_OK
}
