//! Silabs
/////////////////////////////////////////////////////
//
//            Silabs cortex-M devices
//
//     The script tries to detect the right memory sizes
//     however, if this is not correct you can set the sizes
//     in kilobytes on the command line as:
//
//         -D FLASH_SIZE=xxx  and -D RAM_SIZE=xxxx
//

 ///////////////////////////////////////////////////////
 //
 //   Global variables also for all included scripts
 //
intrfApi  <- InterfAPI() // Global so that all included scripts files also have access
targetApi <- TargetAPI() // Global interface to the target class, our reset_post need it and this is faster than local defined
deviceId  <- 0           // Global deviceId

// Used by script to denote a not found devcie
const ERROR_NOT_FOUND -100

/////////////////////////////////////////////////////
//
//  The entry point for this script
//
function main()
{
    try{
        findDevice()
        return ERROR_OK
    }
    catch(e){
        // Catch any string exceptions (e.g. Squirrel error's)
        if(catchString(e))
            return ERROR_NOTIFIED

        if( e == ERROR_NOT_FOUND)
            if(deviceId)
                errorf("ERROR: Unknown family ID %d. (Please add it)\n", deviceId)
            else
                errorf("ERROR: No valid Silabs device ID found\n")
        else
            errorf("Error:\tCan't access target device!\n\tIf reset is disabled (\"dr\" option), try with reset.")
        return ERROR_NOTIFIED  // We have already thrown an error so use -1 (otherwise < -1)
    }
}

/////////////////////////////////////////////////////
//
//
//
function findDevice()
{
    // Check if the right script API is supported
    if( VERSION < 4.7){
       errorf("Error:\nIncompatiable EBlink version %.2f\nPlease update EBlink\n", VERSION)
       throw ERROR_NOTIFIED
    }

    deviceId = intrfApi.readMem32(0x0FE081FC)
    if(deviceId){
        require("silabs/silabs.script")
        silabs_device()
        return
    }

    throw ERROR_NOT_FOUND
}


/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    try {
        // Check if there is an user defined post reset hook, the user
        // can add his own reset strategy with -S <myscript> as last
        // defined script on the cli.
        if (isScriptObject("reset_post_hook"))
            return reset_post_hook(resetType);

        // We don't use this if the reset is a user_script type. In that
        // case, the user is responsible for the initialization.
        //
        if( resetType != USER_RESET ){

            // Set the Stack pointer according the Vector table entry
            targetApi.writeReg("SP", intrfApi.readMem32(0x00000000))

            // Set the Program pointer according the Vector table entry
            targetApi.writeReg("PC", intrfApi.readMem32(0x00000004))
        }
    }
    catch(e) {
        // Catch Squirrel errors in other optional scripts (e.g. reset_post_hook)
        if(catchString(e))
            return ERROR_NOTIFIED

       if(e < ERROR_NOTIFIED)
                errorf("ERROR(%d): reset failed\n", e )

       return ERROR_NOTIFIED
    }

    return ERROR_OK
}

