/////////////////////////////////////////////////////
//
//                   STM32H5x
//

//*************************************************************
//*****          Memory map of the H5                      ****
//*************************************************************
const mem_template_H5 = @@"
<?xml version=\"1.0\"?>
<memory-map>
  <memory type=\"rom\" start=\"0x00000000\" length=\"0x100000\"/>
  <memory type=\"ram\" start=\"0x10000000\" length=\"0x4000\"/>

  <!-- SRAM -->
  <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>

  <!-- Flash bank 1-->
  <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
   <property name=\"blocksize\">0x2000</property>
   <property name=\"secstart\">0</property>
  </memory>

  <!-- Flash bank 2-->
  <memory type=\"flash\" start=\"0x%x\" length=\"0x%x\">
   <property name=\"blocksize\">0x2000</property>
   <property name=\"secstart\">0</property>
  </memory>

  <!-- Highcycle data flash 1 -->
  <memory type=\"flash\" start=\"0x%x\" length=\"0x%x\">
   <property name=\"blocksize\">0x1800</property>
   <property name=\"secstart\">%d</property>
   <property name=\"sectype\">nocache</property>
  </memory>

  <!-- Highcycle data flash 2 -->
  <memory type=\"flash\" start=\"0x%x\" length=\"0x%x\">
   <property name=\"blocksize\">0x1800</property>
   <property name=\"secstart\">%d</property>
   <property name=\"sectype\">nocache</property>
  </memory>

  <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
  <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
  <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
  <memory type=\"rom\" start=\"0x0bf90000\" length=\"0x8000\"/>
</memory-map>"

// Option register settings for highcycle data
const FLASH_HIGH_CNF_1 0x500220f0
const FLASH_HIGH_CNF_2 0x500221f0
const FLASH_HIGH_EN    (1<<15)
const FLASH_HIGH_SEC   0x7

// The start address of flash bank 2
flashBank2Start      <- 0

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local ram_size

    // Get the flash size in KB
    _n_throw(intrfApi.readMem32(0x08fff80c))
    local flash_size = (intrfApi.value32 &0xFFFF) *1024

    // Set the memory map according the device ID
      local deviceStr
      switch(deviceId) {

       case 0x474 : // CHIPID_STM32H503
            deviceStr = "H503"
            ram_size = 0x8000 // 32KB
            break

        case 0x478 : // CHIPID_STM32H523/H533
            deviceStr = "H523/533"
            ram_size = 0x44000 // 272KB
            break

        case 0x484 : // CHIPID_STM32H562/H563/H573
            deviceStr = "H562/563/573"
            ram_size = 0xa0000 // 640k
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    // Calculate start address of flashbank 2
    flashBank2Start = 0x08000000 + flash_size/2

    // Check if there are any HighCycle sectors active in one of the two banks
    local flashDataSectorCnt_1 = highCycleFlashSec(FLASH_HIGH_CNF_1)
    local flashDataSectorCnt_2 = highCycleFlashSec(FLASH_HIGH_CNF_2)
    
     // Calculate the bank sizes according HighCycle options (H503 both are zero)
    local bankSize_1 = getFlashBankSize(flash_size, flashDataSectorCnt_1)
    local bankSize_2 = getFlashBankSize(flash_size, flashDataSectorCnt_2)    

    // Inform the user about the HighCycle data flash
    if(flashDataSectorCnt_1)
        printf("HighCycle Data1: %dKB (%d sectors)\n", flashDataSectorCnt_1 *6, flashDataSectorCnt_1)

    if(flashDataSectorCnt_2)
        printf("HighCycle Data2: %dKB (%d sectors)\n", flashDataSectorCnt_2 *6, flashDataSectorCnt_2)

    // Pass the formatted memory map.
    DeviceAPI().memmap(format( mem_template_H5, ram_size,
                               bankSize_1,
                               flashBank2Start, bankSize_2,
                               //               Start Addr                             total length                    Start sector count
                               (0x09000000 + (8-flashDataSectorCnt_1)*0x1800), ( flashDataSectorCnt_1 * 0x1800), 8 - flashDataSectorCnt_1,
                               (0x0900C000 + (8-flashDataSectorCnt_2)*0x1800), ( flashDataSectorCnt_2 * 0x1800), 8 - flashDataSectorCnt_2 ))

    // Include flash loader script
    require("stmicro/flash/h5.script")
}

/////////////////////////////////////////////////////
//
//  Returns the HighCycle data flash sector count
//
function highCycleFlashSec(flashReg)
{
    _n_throw(intrfApi.readMem32(flashReg))
    return ( intrfApi.value32 & FLASH_HIGH_EN  ? (intrfApi.value32 & FLASH_HIGH_SEC)+1 : 0)
}

/////////////////////////////////////////////////////
//
//  Calculates the flashbank size
//
function getFlashBankSize(flashSize, dataSectors)
{
    if(dataSectors == 0) return flashSize/2
    if(dataSectors <5 )  return flashSize/2 - (4*  0x2000)
    return flashSize/2 - (8*  0x2000)
}


