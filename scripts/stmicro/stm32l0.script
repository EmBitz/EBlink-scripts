/////////////////////////////////////////////////////
//
//                   STM32L0x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"rom\" start=\"0x1FF80000\" length=\"20\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>"

// The flash parameters needed by the flash loader script
const FLASH_BASE 0x40022000

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local page_size = 0x80
    local ram_size = 0x2000

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    intrfApi.writeMem32(0x40015804, 6)

    // Get the flash size by reading the info register
    flash_size = ((intrfApi.readMem32(0x1ff8007c) & ~3) & 0xffff) * 1024

    local deviceStr
    switch(deviceId){
        case 0x417 :0
            deviceStr = "(Cat. 3)"
            page_size = 0x80
            ram_size = 0x2000
            break

        case 0x425 :
            deviceStr = "(Cat. 2)"
            page_size = 0x80
            ram_size = 0x2000
            break

        case 0x447 :
            deviceStr = "(Cat. 5)"
            page_size = 0x80
            ram_size = 0x5000
            break

        case 0x457 :
            deviceStr = "(Cat. 1)"
            page_size = 0x80
            ram_size = 0x2000
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32L0xx %s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap( format( mem_template, flash_size, ram_size, flash_size, page_size) )

    // The erased value of these chips is not 0xFF but 0x00
    DeviceAPI().setFlashEraseValue(0x00)

    // Don't trim the sectors, only whole sector sizes are programmed
    DeviceAPI().setFlashDontTrim(true)

    // Flash loader script
    require("stmicro/flash/l1_l0.script")
}

