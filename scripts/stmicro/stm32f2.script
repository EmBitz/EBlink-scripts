/////////////////////////////////////////////////////
//
//                   STM32F2x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
  <!-- Sectors 0..3 16KB each -->
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x10000\">
  <property name=\"blocksize\">0x4000</property>
  <property name=\"secstart\">0</property>
 </memory>
  <!-- Sectors 4 64KB each -->
 <memory type=\"flash\" start=\"0x08010000\" length=\"0x10000\">
  <property name=\"blocksize\">0x10000</property>
 </memory>
  <!-- Sectors 5.. 128KB each -->
 <memory type=\"flash\" start=\"0x08020000\" length=\"0x%x\">
  <property name=\"blocksize\">0x20000</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
<!-- option byte area -->
 <memory type=\"rom\" start=\"0x1ffff800\" length=\"0x10\"/>
</memory-map>"

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local ram_size

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    intrfApi.writeMem32(0xE0042004, 7)

    // Stop watchdog counters during halt: DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
    intrfApi.writeMem32(0xE0042008, 0x00001800)

    // Get the flash size by reading the info register
    flash_size = intrfApi.readMem32(0x1fff7a22) >>16
    flash_size = (flash_size & 0xffff) * 1024

    local deviceStr
    switch(deviceId) {
        case 0x411 : // CHIPID_STM32_F2
            deviceStr = "2xx"
            ram_size = 0x20000
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32F%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap( format( mem_template, flash_size,
                                              ram_size,
                                              flash_size - (128*1024) ) )

    require("stmicro/flash/f7_f4_f2.script")
}
