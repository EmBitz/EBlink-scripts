/////////////////////////////////////////////////////
//
//                   STM32C0x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces.
//

//*************************************************************
//*****             Memory map of the C0                   ****
//*************************************************************
const mem_template_C0 = @@"
<?xml version=\"1.0\"?>
<memory-map>
  <memory type=\"rom\" start=\"0x00000000\" length=\"0x100000\"/>
  <memory type=\"ram\" start=\"0x10000000\" length=\"0x4000\"/>
  <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>

  <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
   <property name=\"blocksize\">0x%x</property>
   <property name=\"secstart\">0</property>
  </memory>

  <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
  <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
  <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
  <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x1800\"/>
  <memory type=\"rom\" start=\"0x1fff7800\" length=\"0x80\"/>

    <!-- option byte area (virtual sector) -->
  <memory type=\"flash\" start=\"0x1ff20000\" length=\"20\">
    <property name=\"blocksize\">20</property>
    <property name=\"secstart\">999</property>
    <property name=\"sectype\">virtual</property>
  </memory>

 </memory-map>"

// The parameters for the flash script
const FLASH_BASE  0x40022000
const hasDualBank false

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local page_size
    local ram_size

    // Get the flash size in KB
    flash_size = (intrfApi.read(0x1fff75a0) &0xFFFF) *1024

    // Set the memory map according the device ID
      local deviceStr
      switch(deviceId) {
            case 0x443:
                deviceStr = "C01x"
                ram_size = 0x1800
                page_size = 0x800
                break;

            case 0x453:
                deviceStr = "C03x"
                ram_size = 0x3000 //12KB
                page_size = 0x800
                break;

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap(format( mem_template_C0, ram_size, flash_size, page_size))

    // Include flash loader script
    require("stmicro/flash/c0_l4_gx_wx.script")

    // =================== Read level protection (RDP) check =================

    // Get an ebBuffer with the current options
    local devOpt = flashGetOptionBuffer()

    // Check the readout level
    local rdpLevel = flashRDPlevel(devOpt)


    if(rdpLevel == 2){
        errorf("This device is protected with level 2\nNo debug possible\n")
        throw ERROR_NOTIFIED
    }

    if(rdpLevel == 1){
        if( yesNof(1, "Read protection level 1 active\nClear (chip will erase) to level 0?") ) {
            printf("\nReset the RDP level to 0\nThis can take a while due to erasing\n")

            // Clear the readout level inside out option buffer
            flashClearRDP(devOpt)

            // Remark: If other options should be cleared
            //         Do it here!
           flashOptionWrite(devOpt)
           printf("\nOptions bytes ready\nPlease power cycle the device in order to continue!!\n\n")
        }
        else {
            errorf("This device is protected with level 1\nDevice not accessible\n")
        }

        // We quit EBlink because the MCU needs power reset in order to release the debug interface
        throw ERROR_NOTIFIED
    }
}


