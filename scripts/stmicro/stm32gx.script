/////////////////////////////////////////////////////
//
//                   STM32Gx
//
// ToDo: - option programming
//


// -- Single bank with no CRAM ----
const mem_single_no_cram = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>

  <!-- option byte area (virtual sector) -->
  <memory type=\"flash\" start=\"0x1ff20000\" length=\"20\">
    <property name=\"blocksize\">20</property>
    <property name=\"secstart\">999</property>
    <property name=\"sectype\">virtual</property>
  </memory>

</memory-map>"

// -- Single bank with CRAM ----
const mem_single_cram = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>

  <!-- option byte area (virtual sector) -->
  <memory type=\"flash\" start=\"0x1ff20000\" length=\"20\">
    <property name=\"blocksize\">20</property>
    <property name=\"secstart\">999</property>
    <property name=\"sectype\">virtual</property>
  </memory>

</memory-map>"

// -- Dual bank with CRAM ----
const mem_dual_cram = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x08040000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>

  <!-- option byte area (virtual sector) -->
  <memory type=\"flash\" start=\"0x1ff20000\" length=\"20\">
    <property name=\"blocksize\">20</property>
    <property name=\"secstart\">999</property>
    <property name=\"sectype\">virtual</property>
  </memory>

</memory-map>"

// -- Dual bank with no CRAM ----
const mem_dual_no_cram = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"flash\" start=\"0x%x\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>

  <!-- option byte area (virtual sector) -->
  <memory type=\"flash\" start=\"0x1ff20000\" length=\"20\">
    <property name=\"blocksize\">20</property>
    <property name=\"secstart\">999</property>
    <property name=\"sectype\">virtual</property>
  </memory>

</memory-map>"

// The parameters for the flash script
const FLASH_BASE 0x40022000
hasDualBank <- false // Enables dual bank support

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local cram_size = 0  // Default no CRAM
    local flash_size
    local page_size
    local sram_size
    local bank2_start_address = 0x08020000

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    intrfApi.write(0x40015804, 6)

    // Get the flash size by reading the info register
    flash_size = ((intrfApi.read(0x1fff75e0) & ~3) & 0xffff) * 1024

    local deviceStr
    switch(deviceId){
        case 0x456 :
            deviceStr = "05/06xx"
            page_size = 0x800
            sram_size = 0x4800 // 18Kbyte
            break

        case 0x460 :
            deviceStr = "07/08xx"
            page_size = 0x800
            sram_size = 0x9000 // 36Kbyte
            break

        case 0x466 :
            deviceStr = "03/04xx"
            page_size = 0x800
            sram_size = 0x2000 // 8Kbyte
            break

        case 0x467 :
            deviceStr = "0B1xx/0C1xx"
            page_size = 0x800   // 2K single bank
            sram_size = 0x20000 // 144K
            hasDualBank = readDualBankOption()
            if(hasDualBank){
                flash_size = flash_size/2
                if(flash_size > 0x20000) // 128Kbyte
                    bank2_start_address = 0x08040000
            }
            break

        case 0x468 :
            deviceStr = "43/44xx"
            page_size = 0x800
            cram_size = 0x2800 // 10K
            sram_size = 0x8000 // 32K
            break

        case 0x469 :
            deviceStr = "47/48xx"
            page_size = 0x1000  // 4K single bank
            cram_size = 0x8000  // 32K
            sram_size = 0x20000 // 128K
            hasDualBank = readDualBankOption()
            if(hasDualBank){
                page_size =  0x800  // 2K
                flash_size = flash_size/2
            }
            break

        case 0x479 :
            deviceStr = "49x"
            page_size = 0x800   // 2K single and dual bank
            cram_size = 0x4000  // 16K
            sram_size = 0x18000 // 96K
            hasDualBank = readDualBankOption()
            if(hasDualBank)
                flash_size = flash_size/2
            break

    default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32G%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB%s\nConfigured RAM : %dKB\n", flash_size/1024, (hasDualBank ? " - Dualbank" :""), sram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      sram_size = (RAM_SIZE & 0xffff) * 1024
    }

    if(hasDualBank){
        if(cram_size ==0)
            DeviceAPI().memmap( format( mem_dual_no_cram,   flash_size,
                                                sram_size,
                                                flash_size,
                                                page_size,
                                                bank2_start_address,
                                                flash_size,
                                                page_size) )
        else
            DeviceAPI().memmap( format( mem_dual_cram,   flash_size,
                                                cram_size,
                                                sram_size,
                                                flash_size,
                                                page_size,
                                                flash_size,
                                                page_size) )
    }
    else{
        if(cram_size ==0)
            DeviceAPI().memmap( format( mem_single_no_cram, flash_size,
                                                       sram_size,
                                                       flash_size,
                                                       page_size) )
        else
            DeviceAPI().memmap( format( mem_single_cram, flash_size,
                                                    cram_size,
                                                    sram_size,
                                                    flash_size,
                                                    page_size) )

    }

    // Flash loader script
    require("stmicro/flash/c0_l4_gx_wx.script")

    // =================== Read level protection (RDP) check =================

    // Get an ebBuffer with the current options
    local devOpt = flashGetOptionBuffer()

    // Check the readout level
    local rdpLevel = flashRDPlevel(devOpt)


    if(rdpLevel == 2){
        errorf("This device is protected with level 2\nNo debug possible\n")
        throw ERROR_NOTIFIED
    }

    if(rdpLevel == 1){
        if( yesNof(1, "Read protection level 1 active\nClear (chip will erase) to level 0?") ) {
            printf("\nReset the RDP level to 0\nThis can take a while due to erasing\n")

            // Clear the readout level inside out option buffer
            flashClearRDP(devOpt)

            // Remark: If other options should be cleared
            //         Do it here!
           flashOptionWrite(devOpt)
           printf("\nOptions bytes ready\nPlease power cycle the device in order to continue!!\n\n")
        }
        else {
            errorf("This device is protected with level 1\nDevice not accessible\n")
        }

        // We quit EBlink because the MCU needs power reset in order to release the debug interface
        throw ERROR_NOTIFIED
    }
}


////////////////////////////////////////
//
//  Helper function to get the dual bank
//  option state
//
function readDualBankOption()
{
     return (intrfApi.read(FLASH_BASE+0x20) & (1<<22) ? true: false)
}
