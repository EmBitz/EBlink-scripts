/////////////////////////////////////////////////////
//
//                   STM32L5x
//
// This script is using dual bank mode as flash algorithm so we have to define
// the chip as in this mode
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces.
//

//*************************************************************
//*****             Memory map of the L5                   ****
//*************************************************************

const mem_template_L5 = @@"
<?xml version=\"1.0\"?>
<memory-map>
  <memory type=\"rom\" start=\"0x00000000\" length=\"0x100000\"/>
  <memory type=\"ram\" start=\"0x10000000\" length=\"0x4000\"/>
  <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>

  <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
   <property name=\"blocksize\">0x%x</property>
   <property name=\"secstart\">0</property>
  </memory>

  <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
  <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
  <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
  <memory type=\"rom\" start=\"0x0bf90000\" length=\"0x8000\"/>
</memory-map>"


// The parameters for the flash script
const FLASH_BASE 0x40022000
const FLASH_OPTR    0x40

// The FLASH_OPTR bit flags
const DBANK      (1<<22) // Dualbank bit

// Global variable to hold the dual mode status
hasDualBank <- false

// The L5 has a 64 width program word
const pgmBitsWidth 64

// Used for restoreDualBankMode function
const defaultOptrValue 0x7FEFF8AA

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local page_size
    local ram_size

    hasDualBank = getDualBankOption()

    // Get the flash size in KB
    flash_size = (intrfApi.read(0x0bfa05e0) &0xFFFF)*1024


    // Set the memory map according the device ID
      local deviceStr
      switch(deviceId) {
        case 0x472 : // CHIPID_STM32L5x2xx
            deviceStr = "L5x2xx"
            ram_size = 0x40000 // 256KB
            page_size = hasDualBank ? 0x800 : 0x1000 // dual = 2KB, single = 4KB
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB %s\nConfigured RAM : %dKB\n", flash_size/1024,hasDualBank ? "(Dual bank)" : "(Single bank)", ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap(format( mem_template_L5, ram_size, flash_size, page_size))

    // Include flash loader script
    require("stmicro/flash/l5_u5.script")
}

////////////////////////////////////////
//
//  Helper function to get the dual bank
//  option state
//
function getDualBankOption()
{
    return (intrfApi.read(FLASH_BASE+FLASH_OPTR) & DBANK)
}