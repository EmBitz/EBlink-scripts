/////////////////////////////////////////////////////
//
//                   STM32F0x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
<!-- option byte area -->
 <memory type=\"rom\" start=\"0x1ffff800\" length=\"0x10\"/>
</memory-map>"

// Debug core registers
const DBGMCU_CR        0x40015804
const DBGMCU_APB1_FZ   0x40015808
const DBGMCU_APB2_FZ   0x4001580C

const DBG_STOP     (1<<1)
const DBG_STANDBY  (1<<2)

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local page_size
    local ram_size

    intrfApi.write(DBGMCU_CR, DBG_STANDBY  )

    // Get the flash size by reading the info register
    flash_size = intrfApi.read(0x1ffff7cc) 
    flash_size = ( (flash_size & ~3) & 0xffff) * 1024

    local deviceStr
    switch(deviceId) {
        case 0x440 : // CHIPID_F0
            deviceStr = "5x/F030x8"
            page_size = 0x400
            ram_size = 0x2000
            break

        case 0x442 : // CHIPID_F09X
            deviceStr = "9x"
            page_size = 0x800
            ram_size = 0x8000
            break

        case 0x444 : // CHIPID_STM32_F0_SMALL
            deviceStr = "3x"
            page_size = 0x400
            ram_size = 0x1000
            break

        case 0x445 : // CHIPID_STM32_F04
            deviceStr = "4x"
            page_size = 0x400
            ram_size = 0x1800
            break

        case 0x448 : // STM32_CHIPID_F0_CAN
            deviceStr = "7x"
            page_size = 0x800
            ram_size = 0x4000
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32F0%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0){
      printf("CLI set  FLASH : %dKB\n", FLASH_SIZE)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0){
      printf("CLI set    RAM : %dKB\n", RAM_SIZE)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap( format( mem_template, flash_size, ram_size, flash_size, page_size))

    // Flash loader script
    require("stmicro/flash/f3_f1_f0.script")
}
