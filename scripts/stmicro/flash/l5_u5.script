/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32L5/U5 (only non-secure memory)
//
//  ToDo:  - option programming
//         - secure memory programming
//


// The definitions below are already defined by upper device script
//
// const FLASH_BASE  : Base address of the flash controller
// const FLASH_OPTR  : Flash option register offset
// hasDualBank       : True if dual bank otherwise false
// defaultOptrValue  : The default factory flash option value (used for option reset)

// Register offsets of the flash controller
const FLASH_ACR     0x00
const FLASH_PDKEYR  0x04
const FLASH_NSKEYR  0x08
const FLASH_OPTKEYR 0x10
const FLASH_NSSR    0x20
const FLASH_NSCR    0x28
const FLASH_ECCR    0x30


// FLASH_NSCR control bit flags
const FLASH_NSCR_NSPG       (1<< 0) // Program
const FLASH_NSCR_NSPER      (1<< 1) // Page erase
const FLASH_NSCR_NSMER1     (1<< 2) // Bank 1 erase
const FLASH_NSCR_NSPNB      (1<< 3) // Page number (7 bits)
const FLASH_NSCR_NSBKER     (1<<11) // Bank select for page erase
const FLASH_NSCR_NSMER2     (1<<15) // Bank 2 erase
const FLASH_NSCR_NSSTRT     (1<<16) // Start command
const FLASH_NSCR_NSOPTSTRT  (1<<17) // Start writing option bytes
const FLASH_NSCR_NSEOPIE    (1<<24)
const FLASH_NSCR_NSERRIE    (1<<25)
const FLASH_NSCR_OBL_LAUNCH (1<<27) // Option bytes reload
const FLASH_NSCR_OPTLOCK    (1<<30) // Lock option bytes
const FLASH_NSCR_NSLOCK     (1<<31) // Lock control register

// FLASH_NSSR status bit flags
const FLASH_NSSR_NSEOP      (1<< 0) // End of Operation
const FLASH_NSSR_NSOPERR    (1<< 1)
const FLASH_NSSR_NSPROGERR  (1<< 3)
const FLASH_NSSR_NSWRPERR   (1<< 4)
const FLASH_NSSR_NSPGAERR   (1<< 5)
const FLASH_NSSR_NSSIZERR   (1<< 6)
const FLASH_NSSR_NSPGSERR   (1<< 7)
const FLASH_NSSR_OPTWERR    (1<<12)
const FLASH_NSSR_NSBSY      (1<<16) // Busy
const FLASH_NSSR_ERROR_MASK 0x20FA

// The FLASH_OPTR bit flags
//const DBANK      (1<<22) // Dualbank bit

const FLASH_KEY1      0x45670123
const FLASH_KEY2      0xCDEF89AB

const OPT_KEY1        0x08192A3B
const OPT_KEY2        0x4C5D6E7F

// All the possible errors mask
FLASH_ERROR <- ( FLASH_NSSR_NSPROGERR | FLASH_NSSR_NSWRPERR | FLASH_NSSR_NSPGAERR |
                 FLASH_NSSR_NSSIZERR | FLASH_NSSR_NSPGSERR)


maxFlashSpeed   <- 16000 // The max speed tested with (can be changed from cli)

// The half of the number of sectors (pages) of the current device. In Dualbank mode we have
// twice the number of the actual pages per bank so if the erase sector count is above the
// half size of the total page count then we are in the second bank.
halfOfSectors   <- 0

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Unlock the flash
//
function ebFlashStart()
{
    try{
        // Set the half sector size global
        halfOfSectors = DeviceAPI().sectorCount()/2

        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()

        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT

            targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        flashUnlock()
        return ERROR_OK
    }

    // Catch all the lock errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error: target initializing! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Erase sequence according ST user manual
//
function ebFlashErase(sector, address)
{
    try{
        local eraseFlags = FLASH_NSCR_NSPER | FLASH_NSCR_NSSTRT

        // Check if we are in the second bank in case of dual bank
        if(hasDualBank && sector >= halfOfSectors)
            eraseFlags  = eraseFlags | ( (sector-halfOfSectors) << 3 | FLASH_NSCR_NSBKER )
        else
            eraseFlags  = eraseFlags | (sector << 3 )

        // 1. Check that no Flash memory operation is ongoing by checking the BSY1 in the SR
        // (we already check that on the end of every flash action)

        // 2. Check and clear all error programming flags due to a previous programming. If not, PGSERR is set
        clear_flash_errors()

        // 3. Set the PER bit and select the page to erase (PNB) in the flash_cr
        // 4. Set the STRT bit of the flash_cr
        intrfApi.write(FLASH_BASE + FLASH_NSCR, eraseFlags )

        // 5. Wait until the BSY bit of the flash_SR
        // 10.000 msec timeoucd ..t sometimes erasing can take long
        flashCheckBusy(10000)
        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//  We don't use a flash loader here. We just write the pages word by word.
//  Because every word needs to be transported by USB, we don't check the busy
//  flag in between because we are not that fast.
//
function ebFlashWrite(sector, address, buffer)
{
    try{
        // Trim the output buffer to match the program width
        buffer.trim(pgmBitsWidth/8)

        // 1. Check that no Flash memory operation is ongoing by checking the NSBSY bit in the FLASH_NSSR register.
        // 2. Check and clear all non-secure error programming flags due to a previous programming. If not, NSPGSERR is set.
        flashCheckBusy(10000)

        // 3. Set the NSPG bit in the FLASH_NSCR register.
        intrfApi.write(FLASH_BASE + FLASH_NSCR,  FLASH_NSCR_NSPG )

        // Adjust the probe speed to the maximum for direct write
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // 4. Perform the data write operation at the desired memory non-secure address
        intrfApi.writeBuf(buffer, address)

        // Restore probe speed
        intrfApi.setSpeed(probeSpeed)

        // 5. Wait until the NSBSY bit is cleared in the FLASH_NSSR register
        flashCheckBusy(10000)

        // 6. Check that NSEOP flag is set in the FLASH_NSSR register (meaning that the
        // programming operation has succeed), and clear it by software.

        // 7. Clear the NSPG bit in the FLASH_NSSR register if there no more programming request anymore.
        intrfApi.write(FLASH_BASE + FLASH_NSCR,
            intrfApi.read (FLASH_BASE + FLASH_NSCR) & ~FLASH_NSCR_NSPG )

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
function ebFlashDone()
{
    try{
        // Lock the flash again
        flashLock()
        return ERROR_OK
    }
    catch(e) {
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: locking device\n")
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flashCheckBusy(timeout)
{
    local status
    local time = GetTickCount()
    do{
        AnimateCursor()

        status = intrfApi.read(FLASH_BASE + FLASH_NSSR)

        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT

    } while ( status & FLASH_NSSR_NSBSY)

    AnimateDone()

    if( status & FLASH_ERROR )
        throw ERROR_FLASH

    // Clear error's
    clear_flash_errors()
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Clear errors according ST user manual
//
function clear_flash_errors()
{
    intrfApi.write(FLASH_BASE + FLASH_NSSR, intrfApi.read(FLASH_BASE + FLASH_NSSR) | FLASH_ERROR  )
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flashUnlock()
{
    // Unlock Flash
    intrfApi.write(FLASH_BASE + FLASH_NSKEYR, FLASH_KEY1 )
    intrfApi.write(FLASH_BASE + FLASH_NSKEYR, FLASH_KEY2 )

    if(intrfApi.read(FLASH_BASE + FLASH_NSCR) & FLASH_NSCR_NSLOCK)
        throw ERROR_UNLOCK
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flashLock()
{
    // Lock Flash and option register
    intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_NSLOCK )
    intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_OPTLOCK )
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if chip erase is needed (e.g. command line flashing)
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EBlink.
//   - This is an isolated function, ebFlashStart and ebFlashDone are not called by EBlink
//
function ebFlashEraseChip()
{
    try{
        // Be sure that the target is halted
        targetApi.halt()

        // Unlock flash
        flashUnlock()

        // 1. Check that no Flash memory operation is ongoing by checking the NSBSY bit in the FLASH_NSSR register.
        // 2. Check and clear all non-secure error programming flags due to a previous programming. If not, NSPGSERR is set.
        flashCheckBusy(10000)

        // 3. Set the NSMER1 bit and NSMER2 bits in the FLASH_NSCR register
        // 4. Set the NSSTRT bit in the FLACH_NSCR register.
        intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2  | FLASH_NSCR_NSSTRT )

        // 5. Wait for the NSBSY bit to be cleared in the FLASH_NSSR.
        flashCheckBusy(10000)

        // 6. The NSMER1 and NSMER2 bit can be cleared if no more non-secure mass erase is requested.
        intrfApi.write(FLASH_BASE + FLASH_NSCR, 0 )

        // Lock the flash again
        flashLock()

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
           return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: mass erase failed! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


////////////////////////////////////////
//
//  Set the dualbank mode from CLI
//
//  This function can be called from cli:
//     eblink -E setDualBank(0|1)
//
function setDualBank(dmode)
{
    try {
        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT

            targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        flashUnlock()

        // Unlock flash options
        intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPT_KEY1 )
        intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPT_KEY2 )


        if(intrfApi.read(FLASH_BASE + FLASH_NSCR) & FLASH_NSCR_OPTLOCK )
            throw ERROR_UNLOCK

        local optr = intrfApi.read(FLASH_BASE + FLASH_OPTR)
        local newValue = ( dmode ? (optr | DBANK) : (optr & ~DBANK ) )

        printf("Flash option 0x%X -> 0x%X\n", optr, newValue)
        intrfApi.write(FLASH_BASE + FLASH_OPTR,  newValue)

        intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_NSOPTSTRT)

        flashCheckBusy(10000)
        intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_OBL_LAUNCH)

        flashLock()
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
        if(catchString(e))
           return ERROR_NOTIFIED
        if(e < ERROR_NOTIFIED)
           errorf("ERROR: set dual bank mode! [%s]\n", errorToStr(e) )
        return ERROR_NOTIFIED
    }
}


////////////////////////////////////////
//
//  Restore the flash option register
//
//  This function can be called from cli:
//     eblink -E restoreDualBankMode()
//
function restoreDualBankMode()
{
    try {
        if( !isScriptObject(defaultOptrValue) || !defaultOptrValue) {
            errorf("This script doesn't support restore for this chip\n")
            return ERROR_NOTIFIED
        }

        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT

            targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        flashUnlock()

        // Unlock flash options
        intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPT_KEY1 )
        intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPT_KEY2 )

        if(intrfApi.read(FLASH_BASE + FLASH_NSCR) & FLASH_NSCR_OPTLOCK)
            throw ERROR_UNLOCK

        intrfApi.write(FLASH_BASE + FLASH_OPTR,  defaultOptrValue)
        intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_NSOPTSTRT)

        flashCheckBusy(10000)
        intrfApi.write(FLASH_BASE + FLASH_NSCR, FLASH_NSCR_OBL_LAUNCH)

        flashLock()

        printf("Flash option restore (0x%X) done\n", defaultOptrValue)
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
        if(catchString(e))
            return ERROR_NOTIFIED
        if(e < ERROR_NOTIFIED)
           errorf("ERROR: flash option restore! [%s]\n", errorToStr(e) )
        return ERROR_NOTIFIED
    }
}
