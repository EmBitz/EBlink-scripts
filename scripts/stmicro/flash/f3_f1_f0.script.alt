/////////////////////////////////////////////////////////////////////////////////
//
//          STM32F3/F1/F0l Flash loader alternative with 16bit fallback
//
//  Remark: The external bootloader needs more ram space than one page size!!!
//
//  Alternative flash script for halfword flashing if the probe doesn't support direct
//  16bit mempry access. It uses an external bootloader to program the flash, however the
//  needed ram space for this bootloader can be larger than available.
//
const FLASH_BASE  0x40022000

const FLASH_KEY   0x04
const FLASH_SR    0x0C
const FLASH_CR    0x10
const FLASH_AR    0x14

// Register flags
const FLASH_SR_BSY      0x01
const FLASH_SR_PROGERR  0x04
const FLASH_SR_WRPERR   0x10
const FLASH_SR_EOP      0x20

const FLASH_CR_LOCK     0x80
const FLASH_CR_STRT     0x40

const FLASH_CR_MER      4
const FLASH_CR_PER      2
const FLASH_CR_PG       1

const FLASH_KEY1        0x45670123
const FLASH_KEY2        0xCDEF89AB


/////////////////////////////////////////////////////////
// Half word external flash loader, parameters :
//  r0 = scratch area
//  r1 = start program address
//  r2 = Length in half words
//
const extFlashLoader = "\
\x01\x25\x04\x26\x08\x4C\x09\x4F\x03\x88\xBB\x42\x05\xD0\x0B\x80\
\xE3\x68\x2B\x42\xFC\xD1\x33\x42\x04\xD1\x02\x30\x02\x31\x01\x3A\
\x00\x2A\xF1\xD1\x00\xBE\xC0\x46\x00\x20\x02\x40\xFF\xFF\x00\x00"

const EXT_LOADER_SIZE  48 //bytes

const LOADER_ADDR      0x20000000
const SCRATCH_ADDR     0x20000030  // The area for program upload

maxFlashSpeed   <-10000 // 10MHz is max speed for direct programming (we think)

/////////////////////////////////////////////////////////////////////////////////
//
//   Called by EBlink to initialize upcoming flash operations.
//   Unlock the flash and preload the flash loader
//
function flash_start()
{
    try{
        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()

        // Be sure that the core is halted and all clocks are reset
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount();
        do{
             targetApi.poll()

          // Timeout of 1sec
            if(GetTickCount() - time > 1000)
              throw ERROR_TIMEOUT

        } while(targetApi.getState() != TARGET_HALTED )

        // Unlock flash
        flash_unlock()

        // Load the flash loader in advance in target RAM in case we need it
        intrfApi.loadString(LOADER_ADDR, extFlashLoader, EXT_LOADER_SIZE)

        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: couldn't initialize target! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Called by EBlink to erase a sector
//   Erase sequence according ST user manual
//    - flash_start() is already called
//    - flash_done() will be called if all flash operations are ready
//
function flash_erase(sector, address)
{
    try{
        // (1) Set the PER bit in the FLASH_CR register to enable page erasing
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_PER )

        // (2) Program the FLASH_AR register to select a page to erase
        intrfApi.write(FLASH_BASE + FLASH_AR, address )

        // (3) Set the STRT bit (keep PER set) in the FLASH_CR register to start the erasing
        intrfApi.write(FLASH_BASE + FLASH_CR,  FLASH_CR_STRT| FLASH_CR_PER)

        // (4) Wait until the BSY bit is reset in the FLASH_SR register
        local status
        local time = GetTickCount()
        do{
            // Check for time out
            if(GetTickCount() - time > 1500)
               throw ERROR_TIMEOUT

            status = intrfApi.read(FLASH_BASE + FLASH_SR)
        }while ( status & FLASH_SR_BSY)

        //  (5) Check the EOP flag in the FLASH_SR register
        if( (status & FLASH_SR_EOP) == 0)
            throw ERROR_FLASH

        // (6) Clear EOP flag by software by writing EOP at 1
        intrfApi.write(FLASH_BASE + FLASH_SR, status | FLASH_SR_EOP)

        // (7) Reset the PER Bit to disable the page erase
        intrfApi.write(FLASH_BASE + FLASH_CR, 0 )

        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}



/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink to write a sector.
//
function flash_write(sector, address, buffer)
{
    try{
        // Enable the program flag PG in flash_CR
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_PG )

        // For direct flash writing we can't be too fast.
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // Write buffer to flash with 16bit memory access
        local result
        try{
            intrfApi.writeBuf(buffer, address, 16)
            return ERROR_OK
        }
        catch(e) {
           result = e;
        }

        // Restore the probe speed
        intrfApi.setSpeed(probeSpeed)

        // Check if the current probe is supporting 16bits width memory access, if not then fall
        // back to external flash loader
        // Remark: This part can be replaced by user warning to update the STlink firmware. This is only here
        //         to support older STlink/V2 firmware versions not capable of 16bit memory access.
        if(result == INTERFACE_NOT_SUPPORTED){
            // Write buffer to data ram space
            intrfApi.writeBuf(buffer, SCRATCH_ADDR)

            // Initialize flash loader
            targetApi.writeReg("R0", SCRATCH_ADDR)         // Data address to be writen
            targetApi.writeReg("R1", address)              // Target address in flash
            targetApi.writeReg("R2", buffer.getSize()/2)   // Halfwords count to be writen

            // Run flash loader and wait till ready (todo: timeout)
            targetApi.execute(LOADER_ADDR, true)

            // Check flash loader result, if $R2 is 0 then all data is written
            if(targetApi.readReg("R2") != 0)
              throw ERROR_FLASH
        }
        else
           throw result
    }

    // Catch all the sector write errors
    catch(e){
      if(catchString(e))
           return ERROR_NOTIFIED
      if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
      return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// Called by EBlink if all flash operations are ready
//
function flash_done()
{
    try{
        // Relock the flash by setting the FLASH_CR_LOCK in the flash CR register
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_LOCK )
        return ERROR_OK
    }

    // Catch all the lock errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error: locking flash failed!\n")
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_unlock()
{
    if(intrfApi.read(FLASH_BASE + FLASH_CR) & FLASH_CR_LOCK ){
        // Unlock Flash
        intrfApi.write(FLASH_BASE + FLASH_KEY, FLASH_KEY1 )
        intrfApi.write(FLASH_BASE + FLASH_KEY, FLASH_KEY2 )

        if(intrfApi.read(FLASH_BASE + FLASH_CR & FLASH_CR_LOCK )
           throw ERROR_UNLOCK
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if chip erase is needed (e.g. command line flashing)
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EBlink.
//   - This is an isolated function, flash_start and flash_done are not called by EBlink
//
function flash_erase_chip()
{
    try{
        printf("Flash chip erase ");

        // Be sure that the target is halted
        targetApi.halt()

        // Unlock flash
        flash_unlock()

        // (1) Set the MER bit in the FLASH_CR register to enable mass erasing
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER )

        // (2) Set the STRT bit in the FLASH_CR register to start the erasing
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER | FLASH_CR_STRT )

        // (3) Wait until the BSY bit is reset in the FLASH_SR register
        local status
        local time = GetTickCount()
        do{
            AnimateCursor()

            // Check for time out of 30 seconds
            if(GetTickCount() - time > 30000)
                throw ERROR_TIMEOUT

            status = intrfApi.read(FLASH_BASE + FLASH_SR)
        }while ( status & FLASH_SR_BSY)

        AnimateDone()

        // (4) Check the EOP flag in the FLASH_SR register
        if( (status & FLASH_SR_EOP) == 0)
            throw ERROR_FLASH

        // (5) Clear EOP flag by software by writing EOP at 1
        intrfApi.write(FLASH_BASE + FLASH_SR, status | FLASH_SR_EOP)

        // (6) Reset the PER Bit to disable the mass erase
        intrfApi.write(FLASH_BASE + FLASH_CR, 0 )

        // (7) Relock the flash by setting the FLASH_CR_LOCK in the flash CR register
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_LOCK )

        printf("done\n")
        return ERROR_OK
    }

    // Catch all the mass erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: mass erase failed! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}
