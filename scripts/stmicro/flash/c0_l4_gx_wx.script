/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32 /WB /WG / L4 /Gx
//
//  ToDo:  - Currently only the first 5 option registers can be programmed.
//           We have to make this device related.
//

// Flash registers offsets
const FLASH_ACR         0x00
const FLASH_KEYR        0x08
const FLASH_OPTKEYR     0x0c
const FLASH_SR          0x10
const FLASH_CR          0x14
const FLASH_OPTR        0x20
const FLASH_PCROP1SR    0x24
const FLASH_PCROP1ER    0x28
const FLASH_WRP1AR      0x2C
const FLASH_WRP1BR      0x30

// Gx additional options
const FLASH_PCROP2SR    0x44
const FLASH_PCROP2ER    0x48
const FLASH_WRP2AR      0x4C
const FLASH_WRP2BR      0x50
const FLASH_SEC1R       0x70
const FLASH_SEC2R       0x74

// FLASH_CR register bits
const FLASH_CR_PG           (1 << 0)
const FLASH_CR_PER          (1 << 1)
const FLASH_CR_MER1         (1 << 2)
const FLASH_CR_PAGE_SHIFT   3
const FLASH_CR_MER2         (1 << 15)
const FLASH_CR_STRT         (1 << 16)
const FLASH_CR_OPTSTRT      (1 << 17)
const FLASH_CR_EOPIE        (1 << 24)
const FLASH_CR_ERRIE        (1 << 25)
const FLASH_CR_OBL_LAUNCH   (1 << 27)
const FLASH_CR_OPTLOCK      (1 << 30)
const FLASH_CR_LOCK         (1 << 31)

// FLASH_SR register bits
const FLASH_SR_BSY          (1 << 16)
const FLASH_SR_PGSERR       (1 << 7) // Programming sequence error
const FLASH_SR_SIZERR       (1 << 6) // Size error
const FLASH_SR_PGAERR       (1 << 5) // Programming alignment error
const FLASH_SR_WRPERR       (1 << 4) // Write protection error
const FLASH_SR_PROGERR      (1 << 3) // Programming error
const FLASH_SR_OPERR        (1 << 1) // Operation error
const FLASH_SR_EOP          (1 << 0) // End of operation

// Flash unlock key
const FLASH_KEY1        0x45670123
const FLASH_KEY2        0xCDEF89AB

// Option register unlock key
const OPTKEY1                 0x08192A3B
const OPTKEY2                 0x4C5D6E7F

// The G4 has a different bank erase flag position
FLASH_CR_BKER <- ( deviceId == 0x468 || deviceId == 0x469 || deviceId == 0x479 ?
                    1 << 11 : // G4
                    1 << 13)  // Others

// All the possible errors mask
FLASH_ERROR <- ( FLASH_SR_PGSERR | FLASH_SR_SIZERR  | FLASH_SR_PGAERR |
                 FLASH_SR_WRPERR | FLASH_SR_PROGERR | FLASH_SR_OPERR )

maxFlashSpeed   <- 4000 // 4MHz is max speed (we only tested it with V2 )
halfOfSectors   <- 0    // The half of the number of sectors of the current device

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Unlock the flash
//
function ebFlashStart()
{
    try{
        halfOfSectors = DeviceAPI().sectorCount()/2

        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()

        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
              throw ERROR_TIMEOUT

            targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        flashUnlock()
        return ERROR_OK
    }

    // Catch all the lock errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error: target initializing! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Erase sequence according ST user manual
//
function ebFlashErase(sector, address)
{
    try{
        local eraseFlags = FLASH_CR_PER | FLASH_CR_STRT

        // Skip the virtual option sector
        if(sector == 999)
            return ERROR_OK

        if(hasDualBank && (sector >= halfOfSectors) )
            eraseFlags  = eraseFlags | ( (sector-halfOfSectors)<< FLASH_CR_PAGE_SHIFT | FLASH_CR_BKER )
        else
            eraseFlags  = eraseFlags | (sector<< FLASH_CR_PAGE_SHIFT )

        // 1. Check that no Flash memory operation is ongoing by checking the BSY1 in the SR
        // (we already check that on the end of every flash action)

        // 2. Check and clear all error programming flags due to a previous programming. If not, PGSERR is set
        clear_flash_errors()

        // 3. Set the PER bit and select the page to erase (PNB) in the flash_cr
        // 4. Set the STRT bit of the flash_cr
        intrfApi.write(FLASH_BASE + FLASH_CR, eraseFlags )

        // 5. Wait until the BSY bit of the flash_SR
        // 10.000 msec timeoucd ..t sometimes erasing can take long
        flashCheckBusy(10000)
        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//  We don't use a flash loader here. We just write the pages word by word.
//  Because every word needs to be transported by USB, we don't check the busy
//  flag in between because we are not that fast.
//
function ebFlashWrite(sector, address, buffer)
{
    try{


        // If this is the virtual option sector, go to options write function
        if(sector == 999) {
            printf("\n\nStart writing option bytes virtual sector 999\n")
            return flashOptionWrite(buffer)
        }

        // Check if the buffer size is multiple of 64bits
        // Flash loader works with multiple of 8 bytes.
        buffer.trim(8)

        // Check and clear all error programming flags due to a previous programming. If not, PGSERR is set.
        clear_flash_errors()

        // Set the PG bit of the FLASH control register (FLASH_CR)
        intrfApi.write(FLASH_BASE + FLASH_CR,  FLASH_CR_PG )

        // Adjust the probe speed to the maximum for direct write
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // Program the flash with 32 bit width memory access
        intrfApi.writeBuf(buffer, address)

        // Restore probe speed
        intrfApi.setSpeed(probeSpeed)

        flashCheckBusy(10000)


        // 7. Clear the PG bit of the FLASH control register (FLASH_CR) if there no more
        // programming request anymore
        intrfApi.write(FLASH_BASE + FLASH_CR,
            intrfApi.read (FLASH_BASE + FLASH_CR) & ~FLASH_CR_PG )

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
function ebFlashDone()
{
    try{
        // Write the CR register to lock (LOCK)
        intrfApi.write(FLASH_BASE + FLASH_CR,
            intrfApi.read(FLASH_BASE + FLASH_CR) | FLASH_CR_LOCK)
        return ERROR_OK
    }
    catch(e) {
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: locking device\n")
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flashCheckBusy(timeout)
{
    local value
    local time = GetTickCount()
    do{
        AnimateCursor()
        value = intrfApi.read(FLASH_BASE + FLASH_SR)
        if(GetTickCount() - time > timeout)
          throw ERROR_TIMEOUT
    } while ( value & FLASH_SR_BSY)

    AnimateDone()

    if( value & FLASH_ERROR )
        throw ERROR_FLASH

    // Clear error's
    clear_flash_errors()
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Clear errors according ST user manual
//
function clear_flash_errors()
{
    intrfApi.write(FLASH_BASE + FLASH_SR, intrfApi.read(FLASH_BASE + FLASH_SR) | FLASH_ERROR  )
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flashUnlock()
{
    // Unlock Flash
    intrfApi.write(FLASH_BASE + FLASH_KEYR, FLASH_KEY1 )
    intrfApi.write(FLASH_BASE + FLASH_KEYR, FLASH_KEY2 )

    if(intrfApi.read(FLASH_BASE + FLASH_CR) & FLASH_CR_LOCK )
       throw ERROR_UNLOCK
}


/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if chip erase is needed (e.g. command line flashing)
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EBlink.
//   - This is an isolated function, ebFlashStart and ebFlashDone are not called by EBlink
//
function ebFlashEraseChip()
{
    try{
        printf("Flash chip erase ")

        // Be sure that the target is halted
        targetApi.halt()

        // Unlock flash
        flashUnlock()

        // (1) Set the MER1 and MER2 bit in the FLASH_CR register to enable mass erasing
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER1)

        // (2) Set the STRT bit in the FLASH_CR register to start the erasing
        if(hasDualBank)
            intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER1 | FLASH_CR_MER2  | FLASH_CR_STRT )
        else
            intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER1 | FLASH_CR_STRT )

        // (3) Wait until the BSY bit is reset in the FLASH_SR register
        local time = GetTickCount()
        do{
            AnimateCursor()

            // Check for time out of 30 seconds
            if(GetTickCount() - time > 3000)
                throw ERROR_TIMEOUT
        }while ( intrfApi.read(FLASH_BASE + FLASH_SR) & FLASH_SR_BSY)

        AnimateDone()

        // Lock the flash again
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_LOCK )

        printf("done\n")
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
        if(catchString(e))
           return ERROR_NOTIFIED
        if(e < ERROR_NOTIFIED)
           errorf("ERROR: mass erase failed! [%s]\n", errorToStr(e) )
        return ERROR_NOTIFIED
    }
}

//===================================================================================
//                            Option byte programming
//
//  Virtual sector 999 of 20 bytes with format as below.
//  Be aware of reserved reset values!! (otherwise program errors)
//
//  typedef struct {        //   Reset
//     un32 FLASH_OPTR;     // 0xFFEFF8AA
//     un32 FLASH_PCROP1SR; // 0xFFFFFFFF
//     un32 FLASH_PCROP1ER; // 0xFFFF0000
//     un32 FLASH_WRP1AR;   // 0xFF00FFFF
//     un32 FLASH_WRP1BR;   // 0xFF00FFFF
//  } STM32_options;
//
//  Todo: expand this for e.g. Gx with more option registers
//

// The index in the ebBuffer of the options
const FLASH_OPTR_IDX     0
const FLASH_PCROP1SR_IDX 1
const FLASH_PCROP1ER_IDX 2
const FLASH_WRP1AR_IDX   3
const FLASH_WRP1BR_IDX   4

//  Mapping of the EBlink EBbuffer (virtual sector) and STM32 registers
OPT_MAPPING <- [[FLASH_OPTR,     "FLASH_OPTR    : 0x%08x\n"], // EBbuffer[0]
                [FLASH_PCROP1SR, "FLASH_PCROP1SR: 0x%08x\n"],
                [FLASH_PCROP1ER, "FLASH_PCROP1ER: 0x%08x\n"],
                [FLASH_WRP1AR,   "FLASH_WRP1AR  : 0x%08x\n"],
                [FLASH_WRP1BR,   "FLASH_WRP1BR  : 0x%08x\n"]] // EBbuffer[4]


/////////////////////////////////////////////////////////////////////////////////
//
//  Write STM32H7 option bytes
//
function flashOptionWrite(optionBuf)
{
    try{
        // Get the current options
        local curOptions = flashGetOptionBuffer()

        // Check if the options are not already set
        if(!( optionBuf <=> curOptions)){
            debugf("Skipping options writing due equal settings\n")
            return ERROR_OK
        }

        // Check if the buffer is valid ( Todo: support larger option arrays like Gx)
        if(optionBuf.getSize() != 20){
            errorf("Error: Option program length is %d, should be 20 bytes\n", optionBuf.getSize())
            throw ERROR_NOTIFIED
        }

        // Generic flash unlock
        flashUnlock()

        //------------- Unlock options  --------------
        // Check if options are locked by the FLASH_OPTCR_OPTLOCK flag
        if( intrfApi.read(FLASH_BASE + FLASH_CR) & FLASH_CR_OPTLOCK  ){

            // Write FLASH_OPTKEYR to unlock
           intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPTKEY1)
           intrfApi.write(FLASH_BASE + FLASH_OPTKEYR, OPTKEY2)

            // Reread flash FLASH_OPTCR to check if we are unlocked
            if( intrfApi.read(FLASH_BASE + FLASH_CR) & FLASH_CR_OPTLOCK  )
                throw ERROR_UNLOCK
        }

        //-------------- Program the options ---------
        printf("Write buffer into option registers:\n")
        for(local i=0; i<OPT_MAPPING.len(); i++) {
            if(curOptions[i] != optionBuf[i] ) {
                debugf(OPT_MAPPING[i][1], optionBuf[i])
                intrfApi.write(FLASH_BASE + OPT_MAPPING[i][0], optionBuf[i] )
            }
        }

        //------------- Commit options  --------------
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_OPTSTRT)
        flashCheckBusy(1000)
        intrfApi.write(FLASH_BASE + FLASH_CR, intrfApi.read(FLASH_BASE + FLASH_CR) & ~FLASH_CR_OPTSTRT)


        // Relock the flash
        intrfApi.write(FLASH_BASE + FLASH_CR, intrfApi.read(FLASH_BASE + FLASH_CR) | FLASH_CR_LOCK)

        // Check for errors
        if(intrfApi.read(FLASH_BASE + FLASH_SR) & FLASH_SR_OPERR)
            throw ERROR_FLASH

        return ERROR_OK
    }

    catch(e){
       catchThrowStr(e)
       if(e < ERROR_NOTIFIED)
           errorf("Error: options writing failed! [%s]\n", errorToStr(e) )
       throw ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//  This function will return an EBbuffer filled with options values
//
function flashGetOptionBuffer()
{
    local optionBuf = EBbuffer(5*4)   // Allocate buffer to hold 5 words

    debugf("Read option registers in buffer:\n")
    for(local i=0; i<OPT_MAPPING.len(); i++) {
        optionBuf[i] = intrfApi.read(FLASH_BASE + OPT_MAPPING[i][0])
        debugf(OPT_MAPPING[i][1], optionBuf[i])
    }

    return optionBuf
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Get the readout protection level from an ebBuffer option copy.
//
function flashRDPlevel(optionBuf)
{
  switch(optionBuf[FLASH_OPTR_IDX] & 0xFF) {
    case 0xAA : return 0
    case 0xCC : return 2
    default   : return 1  // Everything else is level 1 (protected)
  }
}

////////////////////////////////////////////////////////////////////////////////
//
//  This is a standalone function to clear the RDP level in an ebBuffer options copy
//
function flashClearRDP(optionBuf)
{
    // Clear the readout protection level
    local optsr = optionBuf[FLASH_OPTR_IDX] & 0xFFFFFF00
    optionBuf[FLASH_OPTR_IDX] = optsr | 0x000000AA // Level 0
}