/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32U0
//
//  ToDo:  - option programming
//


// The definitions below are already defined by upper device script
//
// const FLASH_BASE  : Base address of the flash controller
//


// Register offsets of the flash controller
const FLASH_ACR     0x00
const FLASH_KEYR    0x08
const FLASH_OPTKEYR 0x0C
const FLASH_SR      0x10
const FLASH_CR      0x14
const FLASH_ECCR    0x18
const FLASH_OPTR    0x20
const FLASH_WRP1AR  0x2C
const FLASH_WRP1BR  0x30


// FLASH_CR control bit flags
const FLASH_CR_PG         (1<< 0) // Program
const FLASH_CR_PER        (1<< 1) // Page erase
const FLASH_CR_MER1       (1<< 2) // Bank 1 erase
const FLASH_CR_PNB        (1<< 3) // Page number (7 bits)
const FLASH_CR_STRT       (1<<16) // Start command
const FLASH_CR_OPTSTRT    (1<<17) // Start writing option bytes
const FLASH_CR_FSTPG      (1<<18)
const FLASH_CR_EOPIE      (1<<24)
const FLASH_CR_ERRIE      (1<<25)
const FLASH_CR_OBL_LAUNCH (1<<27) // Option bytes reload
const FLASH_CR_OPTLOCK    (1<<30) // Lock option bytes
const FLASH_CR_LOCK       (1<<31) // Lock control register

// FLASH_SR status bit flags
const FLASH_SR_EOP        (1<< 0) // End of Operation
const FLASH_SR_OPERR      (1<< 1)
const FLASH_SR_PROGERR    (1<< 3)
const FLASH_SR_WRPERR     (1<< 4)
const FLASH_SR_PGAERR     (1<< 5)
const FLASH_SR_SIZERR     (1<< 6)
const FLASH_SR_PGSERR     (1<< 7)
const FLASH_SR_MISERR     (1<< 8)
const FLASH_SR_FASTERR    (1<< 9)
const FLASH_SR_HDPOPTWERR (1<<11)
const FLASH_SR_OEMOPTWERR (1<<12)
const FLASH_SR_OPTVERR    (1<<15)
const FLASH_SR_BSY1       (1<<16)
const FLASH_SR_CFGBSY     (1<<18)
const FLASH_SR_OEM1LOCK   (1<<20)
const FLASH_SR_OEM2LOCK   (1<<21)


const FLASH_KEY1      0x45670123
const FLASH_KEY2      0xCDEF89AB

const OPT_KEY1        0x08192A3B
const OPT_KEY2        0x4C5D6E7F

// All the possible errors mask
FLASH_ERROR <- ( FLASH_SR_PROGERR | FLASH_SR_WRPERR | FLASH_SR_PGAERR |
                 FLASH_SR_SIZERR | FLASH_SR_PGSERR | FLASH_SR_MISERR |
                 FLASH_SR_HDPOPTWERR | FLASH_SR_OEMOPTWERR | FLASH_SR_OPTVERR)


maxFlashSpeed   <- 16000 // The max speed tested with (can be changed from cli)



/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Unlock the flash
//
function ebFlashStart()
{
    try{
        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()

        // Be sure that the core is halted
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount()
        do{
            // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT

            targetApi.poll()
        } while(targetApi.getState() != TARGET_HALTED )

        flashUnlock()
        return ERROR_OK
    }

    // Catch all the lock errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error: target initializing! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//   Erase sequence according ST user manual
//
function ebFlashErase(sector, address)
{
    try{
        local eraseFlags = FLASH_CR_PER | FLASH_CR_STRT

        // Check if we are in the second bank in case of dual bank
        eraseFlags  = eraseFlags | (sector << 3 )

        // 1. Check that no Flash memory operation is ongoing by checking the BSY1 in the SR
        // (we already check that on the end of every flash action)

        // 2. Check and clear all error programming flags due to a previous programming. If not, PGSERR is set
        clear_flash_errors()

        // 3. Set the PER bit and select the page to erase (PNB) in the flash_cr
        // 4. Set the STRT bit of the flash_cr
        intrfApi.write(FLASH_BASE + FLASH_CR, eraseFlags )

        // 5. Wait until the BSY bit of the flash_SR
        // 10.000 msec timeoucd ..t sometimes erasing can take long
        flashCheckBusy(10000)
        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
//  We don't use a flash loader here. We just write the pages word by word.
//  Because every word needs to be transported by USB, we don't check the busy
//  flag in between because we are not that fast.
//
function flash_write(sector, address, buffer)
{
    try{
        // Trim the output buffer to match the program width
        buffer.trim(pgmBitsWidth/8)

        // 1. Check that no Flash memory operation is ongoing by checking the NSBSY bit in the FLASH_SR register.
        // 2. Check and clear all non-secure error programming flags due to a previous programming. If not, NSPGSERR is set.
        flashCheckBusy(10000)

        // 3. Set the NSPG bit in the FLASH_CR register.
        intrfApi.write(FLASH_BASE + FLASH_CR,  FLASH_CR_PG )

        // Adjust the probe speed to the maximum for direct write
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // 4. Perform the data write operation at the desired memory non-secure address
        intrfApi.writeBuf(buffer, address)

        // Restore probe speed
        intrfApi.setSpeed(probeSpeed)

        // 5. Wait until the NSBSY bit is cleared in the FLASH_SR register
        flashCheckBusy(10000)

        // 6. Check that NSEOP flag is set in the FLASH_SR register (meaning that the
        // programming operation has succeed), and clear it by software.

        // 7. Clear the NSPG bit in the FLASH_SR register if there no more programming request anymore.
        intrfApi.write(FLASH_BASE + FLASH_CR,
            intrfApi.read (FLASH_BASE + FLASH_CR) & ~FLASH_CR_PG )

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
// EBlink callback
//
function flash_done()
{
    try{
        // Lock the flash again
        flashLock()
        return ERROR_OK
    }
    catch(e) {
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: locking device\n")
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flashCheckBusy(timeout)
{
    local status
    local time = GetTickCount()
    do{
        AnimateCursor()

        status = intrfApi.read(FLASH_BASE + FLASH_SR)

        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT

    } while ( status & FLASH_SR_CFGBSY)

    AnimateDone()

    if( status & FLASH_ERROR )
        throw ERROR_FLASH

    // Clear error's
    clear_flash_errors()
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Clear errors according ST user manual
//
function clear_flash_errors()
{
    intrfApi.write(FLASH_BASE + FLASH_SR, intrfApi.read(FLASH_BASE + FLASH_SR) | FLASH_ERROR  )
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flashUnlock()
{
    // Unlock Flash
    intrfApi.write(FLASH_BASE + FLASH_KEYR, FLASH_KEY1 )
    intrfApi.write(FLASH_BASE + FLASH_KEYR, FLASH_KEY2 )

    if(intrfApi.read(FLASH_BASE + FLASH_CR) & FLASH_CR_LOCK)
        throw ERROR_UNLOCK
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flashLock()
{
    // Lock Flash and option register
    intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_LOCK )
    intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_OPTLOCK )
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if chip erase is needed (e.g. command line flashing)
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EBlink.
//   - This is an isolated function, ebFlashStart and flash_done are not called by EBlink
//
function ebFlashEraseChip()
{
    try{
        // Be sure that the target is halted
        targetApi.halt()

        // Unlock flash
        flashUnlock()

        // 1. Check that no Flash memory operation is ongoing by checking the NSBSY bit in the FLASH_SR register.
        // 2. Check and clear all non-secure error programming flags due to a previous programming. If not, NSPGSERR is set.
        flashCheckBusy(10000)

        // 3. Set the NSMER1 bit and NSMER2 bits in the FLASH_CR register
        // 4. Set the NSSTRT bit in the FLACH_CR register.
        intrfApi.write(FLASH_BASE + FLASH_CR, FLASH_CR_MER1 | FLASH_CR_STRT )

        // 5. Wait for the NSBSY bit to be cleared in the FLASH_SR.
        flashCheckBusy(10000)

        // 6. The NSMER1 and NSMER2 bit can be cleared if no more non-secure mass erase is requested.
        intrfApi.write(FLASH_BASE + FLASH_CR, 0 )

        // Lock the flash again
        flashLock()

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
           return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: mass erase failed! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}


