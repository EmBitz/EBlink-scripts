/////////////////////////////////////////////////////////////////////////////////
//
//                   stm32L1x stm32L0x
//

// Needed global script input: FLASH_BASE

const FLASH_TIMEOUT   2000 // Generic 2sec flash timeout

// stm32lx flash register locations
const FLASH_ACR       0x00
const FLASH_CR        0x04
const FLASH_PDKEYR    0x08
const FLASH_PEKEYR    0x0C
const FLASH_PRGKEYR   0x10
const FLASH_OPTKEYR   0x14
const FLASH_SR        0x18
const FLASH_OBR       0x1C
const FLASH_WRPR      0x20

// FLASH_CR bits
const FLASH_CR_PELOCK      (1<<0)
const FLASH_CR_PRGLOCK     (1<<1)
const FLASH_CR_OPTLOCK     (1<<2)
const FLASH_CR_PROG        (1<<3)
const FLASH_CR_DATA        (1<<4)
const FLASH_CR_FTDW        (1<<8)
const FLASH_CR_ERASE       (1<<9)
const FLASH_CR_FPRG        (1<<10)
const FLASH_CR_EOPIE       (1<<16)
const FLASH_CR_ERRIE       (1<<17)
const FLASH_CR_OBL_LAUNCH  (1<<18)

// FLASH_SR bits
const FLASH_SR_BSY       (1<<0)
const FLASH_SR_EOP       (1<<1)
const FLASH_SR_ENDHV     (1<<2)
const FLASH_SR_READY     (1<<3)
const FLASH_SR_WRPERR    (1<<8)
const FLASH_SR_PGAERR    (1<<9)
const FLASH_SR_SIZERR    (1<<10)
const FLASH_SR_OPTVERR   (1<<11)
const FLASH_SR_NOTZERO   (1<<16)

// Unlock keys
const PEKEY1          0x89ABCDEF
const PEKEY2          0x02030405
const PRGKEY1         0x8C9DAEBF
const PRGKEY2         0x13141516
const OPTKEY1         0xFBEAD9C8
const OPTKEY2         0x24252627

maxFlashSpeed   <- 4000 // 4MHz is max speed for direct programming (we think)

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function ebFlashStart()
{
    try{
        // Override the maximum flash speed from cli
        if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
            maxFlashSpeed = FLASH_SPEED
            printf("Flash speed set: %d KHz\n", maxFlashSpeed)
        }

        // Check that we don't go faster than the user selected on the cli
        if(maxFlashSpeed > intrfApi.getSpeed())
            maxFlashSpeed = intrfApi.getSpeed()

        // Be sure that the core is halted and all clocks are reset
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount();
        do{
            targetApi.poll()

          // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT

        } while(targetApi.getState() != TARGET_HALTED )

        // Read flash lock status
        if( intrfApi.read(FLASH_BASE|FLASH_CR) & (FLASH_CR_PELOCK|FLASH_CR_PRGLOCK) ){
            // Unlock
            intrfApi.write(FLASH_BASE|FLASH_PEKEYR, PEKEY1)
            intrfApi.write(FLASH_BASE|FLASH_PEKEYR, PEKEY2)

            // Read flash CR again to check FLASH_CR_LOCK if it's unlocked
            if( intrfApi.read(FLASH_BASE|FLASH_CR) & FLASH_CR_PELOCK )
                throw ERROR_UNLOCK

            // Unlock flash program
            intrfApi.write(FLASH_BASE|FLASH_PRGKEYR, PRGKEY1)
            intrfApi.write(FLASH_BASE|FLASH_PRGKEYR, PRGKEY2)

            // check CR.prglock is cleared
            if( intrfApi.read(FLASH_BASE|FLASH_CR) & FLASH_CR_PRGLOCK )
                throw ERROR_UNLOCK
        }
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error unlocking flash! [%s]\n", errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Erase sequence according ST user manual
//
function ebFlashErase(sector, address)
{
    try{
        // Set the ERASE and PROG bits in the FLASH_CR register to enable page erasing
        intrfApi.write(FLASH_BASE|FLASH_CR, FLASH_CR_ERASE|FLASH_CR_PROG)

        // Write a 32-bit word value in an address of the selected page to start the erase sequence
        intrfApi.write(address, 0 )

        //  Wait until the BSY bit is reset in the FLASH_SR register
        checkBusy(FLASH_TIMEOUT)

        //  Reset the ERASE bits in the FLASH_CR register to disable the page erase
        intrfApi.write(FLASH_BASE|FLASH_CR, 0)

        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}



/////////////////////////////////////////////////////////////////////////////////
//
//  The length is always equals to the page to be programmed in bytes because trim is
//  set off by parent script.
//
function ebFlashWrite(sector, address, buffer)
{
    try{
        // Enable the program  FPRG and PRG in FLASH_CR
        intrfApi.write( FLASH_BASE|FLASH_CR, FLASH_CR_FPRG |FLASH_CR_PROG )

        // Adjust the probe speed to the maximum for direct write
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // Write halfpages, the buffer size is always the same as sector size (no sector trim)
        local halfPageSize = buffer.getSize()/2
       brkPt()
        intrfApi.writeBuf(buffer, address, 32, 0, halfPageSize )

        checkBusy(FLASH_TIMEOUT)

        // Second half of the page
        intrfApi.writeBuf(buffer, address+halfPageSize, 32, halfPageSize, halfPageSize )


        // Restore probe speed
        intrfApi.setSpeed(probeSpeed)

        //  Wait until the BSY bit is reset in the FLASH_SR register
        checkBusy(FLASH_TIMEOUT)

        // Disable the program flag FPRG in FLASH_CR
        intrfApi.write(FLASH_BASE|FLASH_CR, 0x00)

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! [%s]\n", sector, errorToStr(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//
//
function ebFlashDone()
{
    try{
        //  Locks the NVM by setting PELOCK in CR
        intrfApi.write(FLASH_BASE|FLASH_CR, FLASH_CR_PELOCK)
        return ERROR_OK
    }

    catch(e){
       if(catchString(e))
            return ERROR_NOTIFIED
       if(e < ERROR_NOTIFIED)
           errorf("Error locking flash!\n")
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//
//
function checkBusy(timeout)
{
    // Wait until the BSY bit is reset in the FLASH_SR register
    local status
    local time = GetTickCount()
    do{

        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT

        status = intrfApi.read(FLASH_BASE|FLASH_SR)
    }while ( status & FLASH_SR_BSY )


    // Check for errors
    if( status & (FLASH_SR_NOTZERO | FLASH_SR_SIZERR | FLASH_SR_PGAERR |  FLASH_SR_WRPERR) )
        throw ERROR_FLASH

    //  Check the EOP flag in the FLASH_SR register
    if( !(status & FLASH_SR_EOP) )
       throw ERROR_FLASH
}



