/////////////////////////////////////////////////////////////////////////////////
//
//                   STM32F7H7_flash
//
// TODO: This script is not yet capable of flashing <2.7V
//

// Same Flash registers for both banks access depends on Flash Base address
const FLASH_ACR       0x00
const FLASH_KEYR      0x04
const FLASH_OPTKEYR   0x08
const FLASH_CR        0x0C
const FLASH_SR        0x10
const FLASH_CCR       0x14
const FLASH_OPTCR     0x18
const FLASH_OPTSR_CUR 0x1C
const FLASH_OPTSR_PRG 0x20
const FLASH_OPTCCR    0x24
const FLASH_WPSN_CUR  0x38
const FLASH_WPSN_PRG  0x3C


// FLASH_CR register bits
const FLASH_LOCK     (1 << 0)
const FLASH_PG       (1 << 1)
const FLASH_SER      (1 << 2)
const FLASH_BER      (1 << 3)
const FLASH_PSIZE_8  (0 << 4)
const FLASH_PSIZE_16 (1 << 4)
const FLASH_PSIZE_32 (2 << 4)
const FLASH_PSIZE_64 (3 << 4)
const FLASH_FW       (1 << 6)
const FLASH_START    (1 << 7)

// FLASH_SR register bits
const FLASH_BSY      (1 << 0)  // Operation in progress
const FLASH_QW       (1 << 2)  // Operation queue in progress
const FLASH_WRPERR   (1 << 17) // Write protection error
const FLASH_PGSERR   (1 << 18) // Programming sequence error
const FLASH_STRBERR  (1 << 19) // Strobe error
const FLASH_INCERR   (1 << 21) // Inconsistency error
const FLASH_OPERR    (1 << 22) // Operation error
const FLASH_RDPERR   (1 << 23) // Read Protection error
const FLASH_RDSERR   (1 << 24) // Secure Protection error
const FLASH_SNECCERR (1 << 25) // Single ECC error
const FLASH_DBECCERR (1 << 26) // Double ECC error

// FLASH_OPTCR register bits
const OPT_LOCK               (1 << 0)
const OPT_START              (1 << 1)

// FLASH_OPTSR register bits
const OPT_BSY                 (1 << 0)
const OPT_RDP_POS              8
const OPT_RDP_MASK            (0xff << 8)
const OPT_OPTCHANGEERR        (1 << 30)

// FLASH_OPTCCR register bits
const OPT_CLR_OPTCHANGEERR    (1 << 30)

// register unlock keys
const KEY1                    0x45670123
const KEY2                    0xCDEF89AB

// option register unlock key
const OPTKEY1                 0x08192A3B
const OPTKEY2                 0x4C5D6E7F

const FLASH_BANK0_ADDRESS     0x08000000
const FLASH_BANK1_ADDRESS     0x08100000
const FLASH_REG_BASE_B0       0x52002000
const FLASH_REG_BASE_B1       0x52002100

// Target reset register and options
const NVIC_AIRCR        0xE000ED0C
const AIRCR_VECTKEY     (0x5FA << 16)
const AIRCR_SYSRESETREQ (1 << 2)

// Mask of all the errors
FLASH_ERROR <- (FLASH_WRPERR | FLASH_PGSERR | FLASH_STRBERR | FLASH_INCERR | FLASH_OPERR |
                      FLASH_RDPERR | FLASH_RDSERR | FLASH_SNECCERR | FLASH_DBECCERR)

maxFlashSpeed   <- 10000 // 10MHz is max speed for direct programming (we think)

// Generic Flash Script errors
require("stmicro/flash/errors.script")

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash and preload the flash loader called by EBlink
//
function flash_start()
{
    // Override the maximum flash speed from cli
    if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0){
        maxFlashSpeed = FLASH_SPEED
        printf("Flash speed set: %d KHz\n", maxFlashSpeed)
    }

    // Check that we don't go faster than the user selected on the cli
    if(maxFlashSpeed > intrfApi.getSpeed())
        maxFlashSpeed = intrfApi.getSpeed()

    try{
        // We reset the system so all clocks are at default values (HSI 64)
        targetApi.reset(SYSTEM_RESET)

        // Wait for halt
        local time = GetTickCount();
        do{
            targetApi.poll()

          // Timeout of 1sec
            if(GetTickCount() - time > 1000)
                throw ERROR_TIMEOUT 

        } while(targetApi.getState() != TARGET_HALTED )

        // Check voltage
        if(intrfApi.targetVoltage() < 2.7)
            throw ERROR_VOLTAGE

        return ERROR_OK
    }

    // Catch the errors
    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error: target initializing! %s\n", flashError(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//   The sector erase is called by EBlink if a sector need to be changed
//   Sector erase sequence according ST user manual
//
function flash_erase(sector, address)
{
    local regbase = FLASH_REG_BASE_B0 // first flash bank

    // Skip the virtual option sector
    if(sector == 999)
      return ERROR_OK

    try{
        local bnkSector = sector

        // Select the right bank
        if (address >= FLASH_BANK1_ADDRESS) {
            regbase = FLASH_REG_BASE_B1 // Second flash bank
            bnkSector = sector-8
        }

        // After the reset at flash_start we have core clock HSI 64 MHz, adapt FLASH_ACR.
        intrfApi.writeMem32(regbase + FLASH_ACR, 0)

        // 1)  Check and clear (optional) all the error flags due to previous programming/erase
        flash_get_clear_status(regbase)

        // 2) Unlock the flash bank
        flash_unlock(regbase)

        // (3) Set the SER bit and select the sector out of the 8 in the main memory block) you wish to erase (SNB) in the FLASH_CR register
        // (4) Set the STRT bit in the FLASH_CR register also
        intrfApi.writeMem32(regbase + FLASH_CR, (bnkSector<<8) | FLASH_SER  | FLASH_PG | FLASH_START )

        // (5) Wait for the QW1/2 bit and BSY1/2 to be cleared in the corresponding FLASH_SR1/2 register
        local time = GetTickCount();
        local value
        do{
            value = intrfApi.readMem32(regbase + FLASH_SR)

            // Timeout of 5sec
            if(GetTickCount() - time > 5000)
                throw ERROR_TIMEOUT
                
        }while ( value &  (FLASH_QW | FLASH_BSY) )

        // Check for errors
        if(value & FLASH_ERROR )
            throw ERROR_FLASH

        // Lock the flash again
        flash_lock(regbase)

        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error: sector %d erase failed! %s\n", sector, flashError(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink to flash a sector
//
function flash_write(sector, address, buffer)
{
    local regbase = FLASH_REG_BASE_B0 // first flash bank

    // If this is the virtual option sector, go to options write function
    if(sector == 999) {
      printf("\n\nStart writing option bytes virtual sector 999\n")
      return flash_option_write(buffer)
    }

    // Select the right flash bank
    if (address >= FLASH_BANK1_ADDRESS)
        regbase = FLASH_REG_BASE_B1 // Second flash bank

    // Flash loader works with multiple of 32 bytes.
    buffer.trim(32)

    try{
        // Unlock flash
        flash_unlock(regbase)

        // Enable the program flag PG in flash_CR and 32bits parallelism
        intrfApi.writeMem32(regbase+FLASH_CR, FLASH_PSIZE_32 | FLASH_PG )

        // Lower the probe speed
        local probeSpeed = intrfApi.getSpeed()
        intrfApi.setSpeed(maxFlashSpeed)

        // Write the buffer direct to flash with 32 bits access
        intrfApi.writeBuf(address, buffer, 32)

        // Restore probe speed
        intrfApi.setSpeed(probeSpeed)

        // Check and clear (optional) all the error flags due to previous programming/erase
        if(intrfApi.readMem32(regbase + FLASH_SR) & FLASH_ERROR )
            throw ERROR_FLASH

        // Disable the program flag  PG in flash_CR
        intrfApi.writeMem32(regbase+ FLASH_CR, 0)

        // Lock the flash again
        flash_lock(regbase)

        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error: sector %d writing failed! %s\n", sector, flashError(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink is chip erease is needed (e.g. command line flashing)
//  This function is optional, if EBlink can't find it, it will erase per sector
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used.
//   - This is an isolated function, flash_start and flash_done are not called by EB-link
//   - The boolean "hasSecondBank" is set by parent script
//
function flash_erase_chip()
{
    try{
        local time = GetTickCount()

        flash_erase_bank(1, FLASH_REG_BASE_B0)

        if(hasSecondBank)
             flash_erase_bank(2, FLASH_REG_BASE_B1)

        printf("done [%ums] \n", GetTickCount() - time)
        return ERROR_OK
    }

    catch(e){
       return e
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Erase a flash bank (1MB)
//
function flash_erase_bank(bank, regbase)
{
    try{
        // 1. Check and clear (optional) all the error flags due to previous programming/erase
        flash_get_clear_status(regbase)

        // 2. Unlock the two FLASH_CR1/2 registers and FLASH_OPTCR register
        flash_unlock(regbase)

        //  3. BER1 and  START1 to launch bank erase
        intrfApi.writeMem32(regbase + FLASH_CR,  FLASH_BER | FLASH_START  | FLASH_PG )

        // 4. Then wait until QW bit are cleared in the corresponding FLASH_SR1/2
        flash_check_busy(regbase, 30000) // 30 seconds timeout

        // 5. Lock the flash banks again
        flash_lock(regbase)
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error: mass erase bank %d! %s\n", bank, flashError(e) )
       throw ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Get (and clear) the flash status
//
function flash_get_clear_status(regbase)
{
    if( intrfApi.readMem32(regbase + FLASH_SR) & FLASH_ERROR )
        throw ERROR_FLASH
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Unlock the flash
//
function flash_unlock(regbase)
{
    // Wait for flash not busy
    local time = GetTickCount();
    do{
        // Timeout of 1sec
        if(GetTickCount() - time > 1000)
            throw ERROR_TIMEOUT
            
    }while ( intrfApi.readMem32(regbase + FLASH_SR) &  FLASH_BSY )

    // Read flash lock status in FLASH_CR
    // Check if it's locked by the FLASH_CR_LOCK flag
    if( intrfApi.readMem32(regbase + FLASH_CR) & FLASH_LOCK ){
    
        // Write flash KEYR
        intrfApi.writeMem32(regbase + FLASH_KEYR, KEY1)
        intrfApi.writeMem32(regbase + FLASH_KEYR, KEY2)

        // Read flash CR again to check FLASH_CR_LOCK if it's unlocked
        if( intrfApi.readMem32(regbase + FLASH_CR) & FLASH_LOCK )
            throw ERROR_UNLOCK
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Lock the flash
//
function flash_lock(regbase)
{
    intrfApi.writeMem32(regbase + FLASH_CR, FLASH_LOCK)
    intrfApi.writeMem32(regbase + FLASH_OPTCR, OPT_LOCK)
}


/////////////////////////////////////////////////////////////////////////////////
//
//
//
function flash_check_busy(regbase, timeout)
{
    //Wait until QW bit are cleared in the corresponding FLASH_SR1/2
    local time = GetTickCount()
    do{
        AnimateCursor()

        // Timeout of 30sec (it can take quite long
        if(GetTickCount() - time > timeout)
            throw ERROR_TIMEOUT
            
    }while ( intrfApi.readMem32(regbase + FLASH_SR) &  (FLASH_QW|FLASH_BSY) )

    AnimateDone()
}

//===================================================================================
//                            Option byte programming
//
//  Virtual sector 999 of 32 bytes with format as below.
//  Be aware of reserved reset values!! (otherwise program errors)
//
//  typedef struct {       //   Reset    Flash control offset
//     un32 FLASH_OPTSR;   //0x1416AAF0  0x20 (alias 0x120)
//     un32 FLASH_BOOT;    //0x1FF00800  0x44 (alias 0x144)
//     un32 FLASH_PRAR_x1; //0x000000FF  0x2C
//     un32 FLASH_PRAR_x2; //0x000000FF  0x12C
//     un32 FLASH_SCAR_x1; //0x800000FF  0x34
//     un32 FLASH_SCAR_x2; //0x800000FF  0x134
//     un32 FLASH_WPSN_x1; //0x000000FF  0x3C
//     un32 FLASH_WPSN_x2; //0x000000FF  0x13C
//  } STM32H7_options;
//
//


const FLASH_OPTSR    0
const FLASH_BOOT     4
const FLASH_PRAR_x1  8
const FLASH_PRAR_x2 12
const FLASH_SCAR_x1 16
const FLASH_SCAR_x2 20
const FLASH_WPSN_x1 24
const FLASH_WPSN_x2 28

//  Mapping of the EBlink ebBuffer (virtual sector) and STM32 registers
OPT_MAPPING <- [[ 0,0x20, "FLASH_OPTSR  : 0x%08x\n"],
                [ 4,0x44, "FLASH_BOOT   : 0x%08x\n"],
                [ 8,0x2C, "FLASH_PRAR_x1: 0x%08x\n"],
                [12,0x12C,"FLASH_PRAR_x2: 0x%08x\n"],
                [16,0x34, "FLASH_SCAR_x1: 0x%08x\n"],
                [20,0x134,"FLASH_SCAR_x2: 0x%08x\n"],
                [24,0x3C, "FLASH_WPSN_x1: 0x%08x\n"],
                [28,0x13C,"FLASH_WPSN_x2: 0x%08x\n"]]


/////////////////////////////////////////////////////////////////////////////////
//
//  Write STM32H7 option bytes
//
function flash_option_write(buffer)
{
    local regbase = FLASH_REG_BASE_B0 // first flash bank
    
    // Get the current options
    local curOptions = flash_get_option_buffer()

    // Check if the buffer is valid
    if(buffer.getSize() != 32){
       errorf("Error: Option program length is %d, should be 32 bytes\n", buffer.getSize())
       return ERROR_NOTIFIED
    }

    try{
        //------------- Unlock options  --------------
        // Read flash FLASH_OPTCR
        // Check if options are locked by the FLASH_OPTCR_OPTLOCK flag
        if( intrfApi.readMem32(regbase + FLASH_OPTCR) & OPT_LOCK  ){
            // Write FLASH_OPTKEYR to unlock
           intrfApi.writeMem32(regbase + FLASH_OPTKEYR, OPTKEY1)
           intrfApi.writeMem32(regbase + FLASH_OPTKEYR, OPTKEY2)

            // Reread flash FLASH_OPTCR to check if we are unlocked
            if( intrfApi.readMem32(regbase + FLASH_OPTCR) & OPT_LOCK  )
                throw ERROR_UNLOCK
        }

        //-------------- Program the options ---------
        debugf("Write buffer into option registers:\n")
        foreach(optReg in OPT_MAPPING)
            // Changed options
            if(curOptions.un32(optReg[0]) != buffer.un32(optReg[0]) ) {
                debugf(optReg[2], buffer.un32(optReg[0]))
                intrfApi.writeMem32(regbase + optReg[1], buffer.un32(optReg[0]) )
            }

        //------------- Commit options  --------------

        // Remove OPT error flag in FLASH_OPTCCR before programming
        intrfApi.writeMem32(regbase + FLASH_OPTCCR, OPT_OPTCHANGEERR)

        // Set the FLASH_OPTCR_OPTSTART in the FLASH_OPTCR
        intrfApi.writeMem32(regbase + FLASH_OPTCR, OPT_START)

        local time = GetTickCount();
        do{
            AnimateCursor();

            // Timeout of 10sec
            if(GetTickCount() - time > 10000)
                throw ERROR_TIMEOUT

            // Read the FLASH_OPTSR_CUR to get the busy flag
        }while ( intrfApi.readMem32(regbase + FLASH_OPTSR_CUR) &  OPT_BSY )

        AnimateDone()

        if(intrfApi.readMem32(regbase + FLASH_OPTSR_CUR) & OPT_OPTCHANGEERR)
            throw ERROR_FLASH

        // Relock the options bytes
        intrfApi.writeMem32(regbase + FLASH_OPTCR, OPT_LOCK)

        printf("Options bytes ready\n\n")
        return ERROR_OK
    }

    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("Error: options writing failed! %s\n", flashError(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//  This function will return an ebBuffer with the option filled
//
function flash_get_option_buffer()
{
    local regbase = FLASH_REG_BASE_B0 // first flash bank
    local optionBuf = ebBuffer(32)

    debugf("Read option registers in buffer:\n")
    foreach(optReg in OPT_MAPPING){       
        optionBuf.put32( optReg[0], intrfApi.readMem32(regbase + optReg[1]))
        debugf(optReg[2], optionBuf.un32(optReg[0]))
    }

    return optionBuf
}

/////////////////////////////////////////////////////////////////////////////////
//
//  This function will return an ebBuffer with the option filled
//
function flash_write_option_buffer(optionBuf)
{
    local probeSpeed = intrfApi.getSpeed()
    intrfApi.setSpeed(maxFlashSpeed)
     
    // Reprogram the options
    flash_unlock(FLASH_REG_BASE_B0)
    flash_option_write(optionBuf)
    flash_lock(FLASH_REG_BASE_B0)
    
    intrfApi.setSpeed(probeSpeed)
}

/////////////////////////////////////////////////////////////////////////////////
//
//  This is a standalone function to clear the RDP level
//
function flash_Clear_RDP(optionBuf)
{
    // Clear the readout protection level
    local optsr = optionBuf.un32(FLASH_OPTSR)
    optsr = optsr & 0xFFFF00FF
    optsr = optsr | 0x0000AA00 // Level 0
    optionBuf.put32(FLASH_OPTSR, optsr)
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Get the readout protoection level
//
function flash_RDP_level(optionBuf)
{
  local flash_optsr = optionBuf.un32(FLASH_OPTSR)

  flash_optsr = flash_optsr >> 8
  flash_optsr = flash_optsr & 0xFF

  if( flash_optsr == 0xAA ) return 0
  if( flash_optsr == 0xCc ) return 2
  return 1
}
